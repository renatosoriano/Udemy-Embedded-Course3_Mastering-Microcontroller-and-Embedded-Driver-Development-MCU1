
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002510  08002510  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002510  08002510  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002510  08002510  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000078  08002590  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002590  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002eb3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c75  00000000  00000000  00022f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  00023bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  00023f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004176  00000000  00000000  000242c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004416  00000000  00000000  0002843e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000db2a  00000000  00000000  0002c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003a37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014b4  00000000  00000000  0003a3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002400 	.word	0x08002400

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	08002400 	.word	0x08002400

08000204 <main>:

static void Delay_ms(uint32_t value);


int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
#ifndef PRINT_LCD
	printf("RTC test\n");
#else

    /* LCD Settings */
    LCD_Init();
 800020a:	f000 fc83 	bl	8000b14 <LCD_Init>

    LCD_PrintString("RTC Test...");
 800020e:	4833      	ldr	r0, [pc, #204]	; (80002dc <main+0xd8>)
 8000210:	f000 fd62 	bl	8000cd8 <LCD_PrintString>

    Delay_ms(2000);
 8000214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000218:	f000 f99e 	bl	8000558 <Delay_ms>

    LCD_DisplayClear();
 800021c:	f000 fd48 	bl	8000cb0 <LCD_DisplayClear>

    LCD_DisplayReturnHome();
 8000220:	f000 fd50 	bl	8000cc4 <LCD_DisplayReturnHome>

#endif

    if(DS1307_Init())
 8000224:	f000 faa0 	bl	8000768 <DS1307_Init>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d003      	beq.n	8000236 <main+0x32>
    {
        printf("RTC initialization has failed\n");
 800022e:	482c      	ldr	r0, [pc, #176]	; (80002e0 <main+0xdc>)
 8000230:	f001 fc5c 	bl	8001aec <puts>
        while(1);
 8000234:	e7fe      	b.n	8000234 <main+0x30>
    }

    InitSystickTimer(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f904 	bl	8000444 <InitSystickTimer>

    current_date.day = THURSDAY;
 800023c:	2304      	movs	r3, #4
 800023e:	71fb      	strb	r3, [r7, #7]
    current_date.date = 16;
 8000240:	2310      	movs	r3, #16
 8000242:	713b      	strb	r3, [r7, #4]
    current_date.month = 5;
 8000244:	2305      	movs	r3, #5
 8000246:	717b      	strb	r3, [r7, #5]
    current_date.year = 23;
 8000248:	2317      	movs	r3, #23
 800024a:	71bb      	strb	r3, [r7, #6]

    current_time.hours = 11;
 800024c:	230b      	movs	r3, #11
 800024e:	72bb      	strb	r3, [r7, #10]
    current_time.minutes = 59;
 8000250:	233b      	movs	r3, #59	; 0x3b
 8000252:	727b      	strb	r3, [r7, #9]
    current_time.seconds = 45;
 8000254:	232d      	movs	r3, #45	; 0x2d
 8000256:	723b      	strb	r3, [r7, #8]
    current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000258:	2301      	movs	r3, #1
 800025a:	72fb      	strb	r3, [r7, #11]

    DS1307_SetCurrentDate(&current_date);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fb35 	bl	80008ce <DS1307_SetCurrentDate>
    DS1307_SetCurrentTime(&current_time);
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fa9b 	bl	80007a4 <DS1307_SetCurrentTime>

    DS1307_GetCurrentDate(&current_date);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fb5c 	bl	800092e <DS1307_GetCurrentDate>
    DS1307_GetCurrentTime(&current_time);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fadc 	bl	8000838 <DS1307_GetCurrentTime>

    char *AM_PM;
    if(current_time.time_format != TIME_FORMAT_24HRS)
 8000280:	7afb      	ldrb	r3, [r7, #11]
 8000282:	2b02      	cmp	r3, #2
 8000284:	d013      	beq.n	80002ae <main+0xaa>
    {
        AM_PM = (current_time.time_format) ? "PM" : "AM";
 8000286:	7afb      	ldrb	r3, [r7, #11]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <main+0x8c>
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <main+0xe0>)
 800028e:	e000      	b.n	8000292 <main+0x8e>
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0xe4>)
 8000292:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",TimeToString(&current_time),AM_PM); // 04:25:41 PM
#else
        LCD_PrintString(TimeToString(&current_time));
 8000294:	f107 0308 	add.w	r3, r7, #8
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f87f 	bl	800039c <TimeToString>
 800029e:	4603      	mov	r3, r0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fd19 	bl	8000cd8 <LCD_PrintString>
        LCD_PrintString(AM_PM);
 80002a6:	68f8      	ldr	r0, [r7, #12]
 80002a8:	f000 fd16 	bl	8000cd8 <LCD_PrintString>
 80002ac:	e008      	b.n	80002c0 <main+0xbc>
    else
    {
#ifndef PRINT_LCD
		printf("Current time = %s\n",TimeToString(&current_time)); // 04:25:41
#else
        LCD_PrintString(TimeToString(&current_time));
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f872 	bl	800039c <TimeToString>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fd0c 	bl	8000cd8 <LCD_PrintString>
#endif
    }
#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",DateToString(&current_date), GetDayOfWeek(current_date.day));
#else
    LCD_SetCursor(2, 1);
 80002c0:	2101      	movs	r1, #1
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 fd1c 	bl	8000d00 <LCD_SetCursor>
    LCD_PrintString(DateToString(&current_date));
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f890 	bl	80003f0 <DateToString>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fd00 	bl	8000cd8 <LCD_PrintString>
#endif

    while(1);
 80002d8:	e7fe      	b.n	80002d8 <main+0xd4>
 80002da:	bf00      	nop
 80002dc:	0800245c 	.word	0x0800245c
 80002e0:	08002468 	.word	0x08002468
 80002e4:	08002488 	.word	0x08002488
 80002e8:	0800248c 	.word	0x0800248c

080002ec <GetDayOfWeek>:
    return 0;
}

/* Helper functions */
char* GetDayOfWeek(uint8_t i)
{
 80002ec:	b4b0      	push	{r4, r5, r7}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    char* days[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <GetDayOfWeek+0x38>)
 80002f8:	f107 040c 	add.w	r4, r7, #12
 80002fc:	461d      	mov	r5, r3
 80002fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return days[i - 1];
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	3b01      	subs	r3, #1
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	3328      	adds	r3, #40	; 0x28
 8000312:	443b      	add	r3, r7
 8000314:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000318:	4618      	mov	r0, r3
 800031a:	372c      	adds	r7, #44	; 0x2c
 800031c:	46bd      	mov	sp, r7
 800031e:	bcb0      	pop	{r4, r5, r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	08002490 	.word	0x08002490

08000328 <NumberToString>:

void NumberToString(uint8_t num, char *buf)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
    if(num < 10)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	2b09      	cmp	r3, #9
 8000338:	d809      	bhi.n	800034e <NumberToString+0x26>
    {
        buf[0] = '0';
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	2230      	movs	r2, #48	; 0x30
 800033e:	701a      	strb	r2, [r3, #0]
        buf[1] = num + 48;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	3230      	adds	r2, #48	; 0x30
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	701a      	strb	r2, [r3, #0]
    else if(num >= 10 && num < 99)
    {
        buf[0] = (num / 10) + 48;
        buf[1] = (num % 10) + 48;
    }
}
 800034c:	e01f      	b.n	800038e <NumberToString+0x66>
    else if(num >= 10 && num < 99)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b09      	cmp	r3, #9
 8000352:	d91c      	bls.n	800038e <NumberToString+0x66>
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b62      	cmp	r3, #98	; 0x62
 8000358:	d819      	bhi.n	800038e <NumberToString+0x66>
        buf[0] = (num / 10) + 48;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <NumberToString+0x70>)
 800035e:	fba2 2303 	umull	r2, r3, r2, r3
 8000362:	08db      	lsrs	r3, r3, #3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3330      	adds	r3, #48	; 0x30
 8000368:	b2da      	uxtb	r2, r3
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	701a      	strb	r2, [r3, #0]
        buf[1] = (num % 10) + 48;
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <NumberToString+0x70>)
 8000372:	fba3 1302 	umull	r1, r3, r3, r2
 8000376:	08d9      	lsrs	r1, r3, #3
 8000378:	460b      	mov	r3, r1
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	b2da      	uxtb	r2, r3
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	3230      	adds	r2, #48	; 0x30
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	701a      	strb	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	cccccccd 	.word	0xcccccccd

0800039c <TimeToString>:

//hh:mm:ss
char* TimeToString(RTC_Time_t *RTC_Time)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
    static char buf[9];

    buf[2] = ':';
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <TimeToString+0x48>)
 80003a6:	223a      	movs	r2, #58	; 0x3a
 80003a8:	709a      	strb	r2, [r3, #2]
    buf[5] = ':';
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <TimeToString+0x48>)
 80003ac:	223a      	movs	r2, #58	; 0x3a
 80003ae:	715a      	strb	r2, [r3, #5]

    NumberToString(RTC_Time->hours, buf);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	789b      	ldrb	r3, [r3, #2]
 80003b4:	490b      	ldr	r1, [pc, #44]	; (80003e4 <TimeToString+0x48>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ffb6 	bl	8000328 <NumberToString>
    NumberToString(RTC_Time->minutes, &buf[3]);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	4909      	ldr	r1, [pc, #36]	; (80003e8 <TimeToString+0x4c>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffb0 	bl	8000328 <NumberToString>
    NumberToString(RTC_Time->seconds, &buf[6]);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4907      	ldr	r1, [pc, #28]	; (80003ec <TimeToString+0x50>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffaa 	bl	8000328 <NumberToString>

    buf[8] = '\0';
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <TimeToString+0x48>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	721a      	strb	r2, [r3, #8]

    return buf;
 80003da:	4b02      	ldr	r3, [pc, #8]	; (80003e4 <TimeToString+0x48>)
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000094 	.word	0x20000094
 80003e8:	20000097 	.word	0x20000097
 80003ec:	2000009a 	.word	0x2000009a

080003f0 <DateToString>:

//dd/mm/yy
char* DateToString(RTC_Date_t *RTC_Date)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    static char buf[9];

    buf[2] = '/';
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <DateToString+0x48>)
 80003fa:	222f      	movs	r2, #47	; 0x2f
 80003fc:	709a      	strb	r2, [r3, #2]
    buf[5] = '/';
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <DateToString+0x48>)
 8000400:	222f      	movs	r2, #47	; 0x2f
 8000402:	715a      	strb	r2, [r3, #5]

    NumberToString(RTC_Date->date, buf);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	490b      	ldr	r1, [pc, #44]	; (8000438 <DateToString+0x48>)
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff8c 	bl	8000328 <NumberToString>
    NumberToString(RTC_Date->month, &buf[3]);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	785b      	ldrb	r3, [r3, #1]
 8000414:	4909      	ldr	r1, [pc, #36]	; (800043c <DateToString+0x4c>)
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff86 	bl	8000328 <NumberToString>
    NumberToString(RTC_Date->year, &buf[6]);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	4907      	ldr	r1, [pc, #28]	; (8000440 <DateToString+0x50>)
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff80 	bl	8000328 <NumberToString>

    buf[8] = '\0';
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <DateToString+0x48>)
 800042a:	2200      	movs	r2, #0
 800042c:	721a      	strb	r2, [r3, #8]

    return buf;
 800042e:	4b02      	ldr	r3, [pc, #8]	; (8000438 <DateToString+0x48>)
}
 8000430:	4618      	mov	r0, r3
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200000a0 	.word	0x200000a0
 800043c:	200000a3 	.word	0x200000a3
 8000440:	200000a6 	.word	0x200000a6

08000444 <InitSystickTimer>:

void InitSystickTimer(uint32_t tick_hz)
{
 8000444:	b480      	push	{r7}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <InitSystickTimer+0x5c>)
 800044e:	617b      	str	r3, [r7, #20]
    uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <InitSystickTimer+0x60>)
 8000452:	613b      	str	r3, [r7, #16]

    /* Calculation of reload value */
    uint32_t count_value = (SYSTICK_TIMER_CLK / tick_hz) - 1;
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <InitSystickTimer+0x64>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	fbb2 f3f3 	udiv	r3, r2, r3
 800045c:	3b01      	subs	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]

    /* Clear the value of SVR */
    *pSRVR &= ~(0x00FFFFFFFF);
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]

    /* Load the value into SVR */
    *pSRVR |= count_value;
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	431a      	orrs	r2, r3
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	601a      	str	r2, [r3, #0]

    /* Settings: Enable SysTick exception request */
    *pSCSR |= (1 << 1);
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f043 0202 	orr.w	r2, r3, #2
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	601a      	str	r2, [r3, #0]

    /* Settings: Indicate processor clock source */
    *pSCSR |= (1 << 2);
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f043 0204 	orr.w	r2, r3, #4
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	601a      	str	r2, [r3, #0]

    /* Settings: Enable SysTick counter */
    *pSCSR |= (1 << 0);
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f043 0201 	orr.w	r2, r3, #1
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	371c      	adds	r7, #28
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	e000e010 	.word	0xe000e010
 80004a4:	e000e014 	.word	0xe000e014
 80004a8:	00f42400 	.word	0x00f42400

080004ac <SysTick_Handler>:

void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
    RTC_Time_t current_time;
    RTC_Date_t current_date;

    DS1307_GetCurrentTime(&current_time);
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f9be 	bl	8000838 <DS1307_GetCurrentTime>

    char *AM_PM;
    if(current_time.time_format != TIME_FORMAT_24HRS)
 80004bc:	7afb      	ldrb	r3, [r7, #11]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d017      	beq.n	80004f2 <SysTick_Handler+0x46>
    {
        AM_PM = (current_time.time_format) ? "PM" : "AM";
 80004c2:	7afb      	ldrb	r3, [r7, #11]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SysTick_Handler+0x20>
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <SysTick_Handler+0xa4>)
 80004ca:	e000      	b.n	80004ce <SysTick_Handler+0x22>
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <SysTick_Handler+0xa8>)
 80004ce:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",TimeToString(&current_time),AM_PM); // 04:25:41 PM
#else
        LCD_SetCursor(1, 1);
 80004d0:	2101      	movs	r1, #1
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fc14 	bl	8000d00 <LCD_SetCursor>
        LCD_PrintString(TimeToString(&current_time));
 80004d8:	f107 0308 	add.w	r3, r7, #8
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff5d 	bl	800039c <TimeToString>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fbf7 	bl	8000cd8 <LCD_PrintString>
        LCD_PrintString(AM_PM);
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f000 fbf4 	bl	8000cd8 <LCD_PrintString>
 80004f0:	e00c      	b.n	800050c <SysTick_Handler+0x60>
    else
    {
#ifndef PRINT_LCD
		printf("Current time = %s\n",TimeToString(&current_time)); // 04:25:41
#else
        LCD_SetCursor(1, 1);
 80004f2:	2101      	movs	r1, #1
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 fc03 	bl	8000d00 <LCD_SetCursor>
        LCD_PrintString(TimeToString(&current_time));
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff4c 	bl	800039c <TimeToString>
 8000504:	4603      	mov	r3, r0
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fbe6 	bl	8000cd8 <LCD_PrintString>
#endif
    }

    DS1307_GetCurrentDate(&current_date);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fa0d 	bl	800092e <DS1307_GetCurrentDate>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",DateToString(&current_date), GetDayOfWeek(current_date.day));
#else
    LCD_SetCursor(2, 1);
 8000514:	2101      	movs	r1, #1
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fbf2 	bl	8000d00 <LCD_SetCursor>
    LCD_PrintString(DateToString(&current_date));
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff66 	bl	80003f0 <DateToString>
 8000524:	4603      	mov	r3, r0
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fbd6 	bl	8000cd8 <LCD_PrintString>
    LCD_PrintChar('<');
 800052c:	203c      	movs	r0, #60	; 0x3c
 800052e:	f000 fb9d 	bl	8000c6c <LCD_PrintChar>
    LCD_PrintString(GetDayOfWeek(current_date.day));
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fed9 	bl	80002ec <GetDayOfWeek>
 800053a:	4603      	mov	r3, r0
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fbcb 	bl	8000cd8 <LCD_PrintString>
    LCD_PrintChar('>');
 8000542:	203e      	movs	r0, #62	; 0x3e
 8000544:	f000 fb92 	bl	8000c6c <LCD_PrintChar>
#endif

}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	08002488 	.word	0x08002488
 8000554:	0800248c 	.word	0x0800248c

08000558 <Delay_ms>:

static void Delay_ms(uint32_t value)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0 ; i < (value * 1000); i++);
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e002      	b.n	800056c <Delay_ms+0x14>
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	429a      	cmp	r2, r3
 800057a:	d3f4      	bcc.n	8000566 <Delay_ms+0xe>
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <ITM_SendChar+0x44>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <ITM_SendChar+0x44>)
 8000598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <ITM_SendChar+0x48>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <ITM_SendChar+0x48>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005aa:	bf00      	nop
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f8      	beq.n	80005ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	6013      	str	r3, [r2, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	e000edfc 	.word	0xe000edfc
 80005d0:	e0000e00 	.word	0xe0000e00

080005d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005e6:	f3af 8000 	nop.w
 80005ea:	4601      	mov	r1, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	b2ca      	uxtb	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <_read+0x12>
	}

return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e009      	b.n	8000634 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffad 	bl	8000588 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbf1      	blt.n	8000620 <_write+0x12>
	}
	return len;
 800063c:	687b      	ldr	r3, [r7, #4]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_close>:

int _close(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066c:	605a      	str	r2, [r3, #4]
	return 0;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <_isatty>:

int _isatty(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
	return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
	...

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f001 f968 	bl	80019ac <__errno>
 80006dc:	4603      	mov	r3, r0
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20020000 	.word	0x20020000
 8000708:	00000400 	.word	0x00000400
 800070c:	200000ac 	.word	0x200000ac
 8000710:	200000e8 	.word	0x200000e8

08000714 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000716:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000718:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000742:	f001 f939 	bl	80019b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd5d 	bl	8000204 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   r0, =_estack
 800074c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000758:	08002518 	.word	0x08002518
  ldr r2, =_sbss
 800075c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000760:	200000e8 	.word	0x200000e8

08000764 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC_IRQHandler>
	...

08000768 <DS1307_Init>:
 *
 * @Note        - None
 *
 *****************************************************************/
uint8_t DS1307_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	//returns 1 : CH = 1 ; init failed
	//returns 0 : CH = 0 ; init success

    /* Initialize I2C Pins */
    DS1307_I2C_PinConfig();
 800076e:	f000 f913 	bl	8000998 <DS1307_I2C_PinConfig>

    /* Initialize I2C Peripherals */
    DS1307_I2C_Config();
 8000772:	f000 f939 	bl	80009e8 <DS1307_I2C_Config>

    /* Enable I2C Peripherals */
    I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000776:	2101      	movs	r1, #1
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <DS1307_Init+0x38>)
 800077a:	f000 ff10 	bl	800159e <I2C_PeripheralControl>

    /* Make clock halt = 0 */
    DS1307_Write(0x00, DS1307_ADDR_SECONDS);
 800077e:	2100      	movs	r1, #0
 8000780:	2000      	movs	r0, #0
 8000782:	f000 f947 	bl	8000a14 <DS1307_Write>

    /* Read back clock halt bit */
    uint8_t clock_state = DS1307_Read(DS1307_ADDR_SECONDS);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f960 	bl	8000a4c <DS1307_Read>
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]

    return ((clock_state >> 7 ) & 0x1);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	09db      	lsrs	r3, r3, #7
 8000794:	b2db      	uxtb	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40005400 	.word	0x40005400

080007a4 <DS1307_SetCurrentTime>:
 *
 * @Note        - None
 *
 *****************************************************************/
void DS1307_SetCurrentTime(RTC_Time_t *RTC_Time)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    uint8_t seconds = BinaryToBcd(RTC_Time->seconds);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f969 	bl	8000a88 <BinaryToBcd>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73bb      	strb	r3, [r7, #14]
    seconds &= ~(1 << 7);
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007c0:	73bb      	strb	r3, [r7, #14]
    DS1307_Write(seconds, DS1307_ADDR_SECONDS);
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f924 	bl	8000a14 <DS1307_Write>

    uint8_t minutes = BinaryToBcd(RTC_Time->minutes);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	785b      	ldrb	r3, [r3, #1]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f959 	bl	8000a88 <BinaryToBcd>
 80007d6:	4603      	mov	r3, r0
 80007d8:	737b      	strb	r3, [r7, #13]
    DS1307_Write(minutes, DS1307_ADDR_MINUTES);
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f918 	bl	8000a14 <DS1307_Write>

    uint8_t hours = BinaryToBcd(RTC_Time->hours);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f94d 	bl	8000a88 <BinaryToBcd>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]

    if(RTC_Time->time_format == TIME_FORMAT_24HRS) {
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d104      	bne.n	8000804 <DS1307_SetCurrentTime+0x60>
        hours &= ~(1 << 6);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e010      	b.n	8000826 <DS1307_SetCurrentTime+0x82>
    } else {
        hours |= (1 << 6);
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080a:	73fb      	strb	r3, [r7, #15]
        if(RTC_Time->time_format == TIME_FORMAT_12HRS_PM) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	78db      	ldrb	r3, [r3, #3]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d104      	bne.n	800081e <DS1307_SetCurrentTime+0x7a>
            hours |= (1 << 5);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e003      	b.n	8000826 <DS1307_SetCurrentTime+0x82>
        } else {
            hours &= ~(1 << 5);
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f023 0320 	bic.w	r3, r3, #32
 8000824:	73fb      	strb	r3, [r7, #15]
        }
    }

    DS1307_Write(hours, DS1307_ADDR_HOURS);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f8f2 	bl	8000a14 <DS1307_Write>
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <DS1307_GetCurrentTime>:
 *
 * @Note        - None
 *
 *****************************************************************/
void DS1307_GetCurrentTime(RTC_Time_t *RTC_Time)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint8_t seconds = DS1307_Read(DS1307_ADDR_SECONDS);
 8000840:	2000      	movs	r0, #0
 8000842:	f000 f903 	bl	8000a4c <DS1307_Read>
 8000846:	4603      	mov	r3, r0
 8000848:	73bb      	strb	r3, [r7, #14]
    seconds &= ~(1 << 7);
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000850:	73bb      	strb	r3, [r7, #14]
    RTC_Time->seconds = BcdToBinary(seconds);
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f943 	bl	8000ae0 <BcdToBinary>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	701a      	strb	r2, [r3, #0]

    uint8_t minutes = DS1307_Read(DS1307_ADDR_MINUTES);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 f8f2 	bl	8000a4c <DS1307_Read>
 8000868:	4603      	mov	r3, r0
 800086a:	737b      	strb	r3, [r7, #13]
    RTC_Time->minutes = BcdToBinary(minutes);
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f936 	bl	8000ae0 <BcdToBinary>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	705a      	strb	r2, [r3, #1]

    uint8_t hours = DS1307_Read(DS1307_ADDR_HOURS);
 800087c:	2002      	movs	r0, #2
 800087e:	f000 f8e5 	bl	8000a4c <DS1307_Read>
 8000882:	4603      	mov	r3, r0
 8000884:	73fb      	strb	r3, [r7, #15]

    if(hours & (1 << 6)) {
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00f      	beq.n	80008b0 <DS1307_GetCurrentTime+0x78>
        /* 12 hour format */
        RTC_Time->time_format = !((hours & (1 << 5)) == 0);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	70da      	strb	r2, [r3, #3]
        hours &= ~(0x03 << 5); // Clear 5th and 6th bits
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e002      	b.n	80008b6 <DS1307_GetCurrentTime+0x7e>
    } else {
        /* 24 hour format */
        RTC_Time->time_format = TIME_FORMAT_24HRS;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2202      	movs	r2, #2
 80008b4:	70da      	strb	r2, [r3, #3]
    }

    RTC_Time->hours = BcdToBinary(hours);
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f911 	bl	8000ae0 <BcdToBinary>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	709a      	strb	r2, [r3, #2]
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <DS1307_SetCurrentDate>:
 *
 * @Note        - None
 *
 *****************************************************************/
void DS1307_SetCurrentDate(RTC_Date_t *RTC_Date)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
    DS1307_Write(BinaryToBcd(RTC_Date->date), DS1307_ADDR_DATE);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8d4 	bl	8000a88 <BinaryToBcd>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2104      	movs	r1, #4
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f895 	bl	8000a14 <DS1307_Write>
    DS1307_Write(BinaryToBcd(RTC_Date->month), DS1307_ADDR_MONTH);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8ca 	bl	8000a88 <BinaryToBcd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2105      	movs	r1, #5
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f88b 	bl	8000a14 <DS1307_Write>
    DS1307_Write(BinaryToBcd(RTC_Date->year), DS1307_ADDR_YEAR);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f8c0 	bl	8000a88 <BinaryToBcd>
 8000908:	4603      	mov	r3, r0
 800090a:	2106      	movs	r1, #6
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f881 	bl	8000a14 <DS1307_Write>
    DS1307_Write(BinaryToBcd(RTC_Date->day), DS1307_ADDR_DAY);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	78db      	ldrb	r3, [r3, #3]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f8b6 	bl	8000a88 <BinaryToBcd>
 800091c:	4603      	mov	r3, r0
 800091e:	2103      	movs	r1, #3
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f877 	bl	8000a14 <DS1307_Write>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <DS1307_GetCurrentDate>:
 *
 * @Note        - None
 *
 *****************************************************************/
void DS1307_GetCurrentDate(RTC_Date_t *RTC_Date)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
    RTC_Date->day = BcdToBinary(DS1307_Read(DS1307_ADDR_DAY));
 8000936:	2003      	movs	r0, #3
 8000938:	f000 f888 	bl	8000a4c <DS1307_Read>
 800093c:	4603      	mov	r3, r0
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f8ce 	bl	8000ae0 <BcdToBinary>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	70da      	strb	r2, [r3, #3]
    RTC_Date->date = BcdToBinary(DS1307_Read(DS1307_ADDR_DATE));
 800094c:	2004      	movs	r0, #4
 800094e:	f000 f87d 	bl	8000a4c <DS1307_Read>
 8000952:	4603      	mov	r3, r0
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f8c3 	bl	8000ae0 <BcdToBinary>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	701a      	strb	r2, [r3, #0]
    RTC_Date->month = BcdToBinary(DS1307_Read(DS1307_ADDR_MONTH));
 8000962:	2005      	movs	r0, #5
 8000964:	f000 f872 	bl	8000a4c <DS1307_Read>
 8000968:	4603      	mov	r3, r0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f8b8 	bl	8000ae0 <BcdToBinary>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	705a      	strb	r2, [r3, #1]
    RTC_Date->year = BcdToBinary(DS1307_Read(DS1307_ADDR_YEAR));
 8000978:	2006      	movs	r0, #6
 800097a:	f000 f867 	bl	8000a4c <DS1307_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f8ad 	bl	8000ae0 <BcdToBinary>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	709a      	strb	r2, [r3, #2]
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <DS1307_I2C_PinConfig>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void DS1307_I2C_PinConfig(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    memset(&I2CPins, 0, sizeof(I2CPins));
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	220c      	movs	r2, #12
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f82b 	bl	8001a00 <memset>
    /*
     * I2C1_SCL ==> PB6
     * IC21_SDA ==> PB7
     */
    I2CPins.pGPIOx = DS1307_I2C_GPIO_PORT;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <DS1307_I2C_PinConfig+0x4c>)
 80009ac:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009b2:	2302      	movs	r3, #2
 80009b4:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009b6:	2301      	movs	r3, #1
 80009b8:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009ba:	2301      	movs	r3, #1
 80009bc:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009be:	2302      	movs	r3, #2
 80009c0:	72bb      	strb	r3, [r7, #10]

    /* SCL */
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80009c2:	2306      	movs	r3, #6
 80009c4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fb0f 	bl	8000fec <GPIO_Init>

    /* SDA */
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80009ce:	2307      	movs	r3, #7
 80009d0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fb09 	bl	8000fec <GPIO_Init>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40020400 	.word	0x40020400

080009e8 <DS1307_I2C_Config>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void DS1307_I2C_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    g_DS1307_I2C_Handle.pI2Cx = DS1307_I2C;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <DS1307_I2C_Config+0x20>)
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <DS1307_I2C_Config+0x24>)
 80009f0:	601a      	str	r2, [r3, #0]
    g_DS1307_I2C_Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <DS1307_I2C_Config+0x20>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	725a      	strb	r2, [r3, #9]
    g_DS1307_I2C_Handle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <DS1307_I2C_Config+0x20>)
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <DS1307_I2C_Config+0x28>)
 80009fc:	605a      	str	r2, [r3, #4]
    I2C_Init(&g_DS1307_I2C_Handle);
 80009fe:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DS1307_I2C_Config+0x20>)
 8000a00:	f000 fd0a 	bl	8001418 <I2C_Init>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000b0 	.word	0x200000b0
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <DS1307_Write>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void DS1307_Write(uint8_t Value, uint8_t RegAddr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2];
    tx[0] = RegAddr;
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	733b      	strb	r3, [r7, #12]
    tx[1] = Value;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	737b      	strb	r3, [r7, #13]
    I2C_MasterSendData(&g_DS1307_I2C_Handle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000a2c:	f107 010c 	add.w	r1, r7, #12
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2368      	movs	r3, #104	; 0x68
 8000a36:	2202      	movs	r2, #2
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <DS1307_Write+0x34>)
 8000a3a:	f000 fdcb 	bl	80015d4 <I2C_MasterSendData>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000b0 	.word	0x200000b0

08000a4c <DS1307_Read>:
 *
 * @Note        - None
 *
 *****************************************************************/
static uint8_t DS1307_Read(uint8_t RegAddr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    I2C_MasterSendData(&g_DS1307_I2C_Handle, &RegAddr, 1, DS1307_I2C_ADDRESS, 0);
 8000a56:	1df9      	adds	r1, r7, #7
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2368      	movs	r3, #104	; 0x68
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <DS1307_Read+0x38>)
 8000a62:	f000 fdb7 	bl	80015d4 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_DS1307_I2C_Handle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a66:	f107 010f 	add.w	r1, r7, #15
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2368      	movs	r3, #104	; 0x68
 8000a70:	2201      	movs	r2, #1
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <DS1307_Read+0x38>)
 8000a74:	f000 fe11 	bl	800169a <I2C_MasterReceiveData>

    return data;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000b0 	.word	0x200000b0

08000a88 <BinaryToBcd>:
 *
 * @Note        - None
 *
 *****************************************************************/
static uint8_t BinaryToBcd(uint8_t value)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
    uint8_t high_nibble;
    uint8_t low_nibble;
    uint8_t bcd;

    bcd = value;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	73fb      	strb	r3, [r7, #15]
    if(value >= 10)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d918      	bls.n	8000ace <BinaryToBcd+0x46>
    {
        high_nibble = value / 10;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <BinaryToBcd+0x54>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	73bb      	strb	r3, [r7, #14]
        low_nibble = value % 10;
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <BinaryToBcd+0x54>)
 8000aac:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab0:	08d9      	lsrs	r1, r3, #3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	737b      	strb	r3, [r7, #13]
        bcd = (high_nibble << 4) | low_nibble;
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	73fb      	strb	r3, [r7, #15]
    }

    return bcd;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	cccccccd 	.word	0xcccccccd

08000ae0 <BcdToBinary>:
 *
 * @Note        - None
 *
 *****************************************************************/
static uint8_t BcdToBinary(uint8_t value)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
    uint8_t high_nibble = (uint8_t)((value >> 4) * 10);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	091b      	lsrs	r3, r3, #4
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble = value & (uint8_t)0x0F;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	73bb      	strb	r3, [r7, #14]

    return (high_nibble + low_nibble);
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	4413      	add	r3, r2
 8000b08:	b2db      	uxtb	r3, r3
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <LCD_Init>:
 *
 * @Note        - None
 *
 *****************************************************************/
void LCD_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
    /* Configure the GPIO pins used for LCD connections */
    GPIO_Handle_t LCD_Signal;

    LCD_Signal.pGPIOx = LCD_GPIO_PORT;
 8000b1a:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <LCD_Init+0x110>)
 8000b1c:	607b      	str	r3, [r7, #4]
    LCD_Signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	727b      	strb	r3, [r7, #9]
    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000b22:	2300      	movs	r3, #0
 8000b24:	723b      	strb	r3, [r7, #8]
    LCD_Signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b26:	2300      	movs	r3, #0
 8000b28:	733b      	strb	r3, [r7, #12]
    LCD_Signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	72fb      	strb	r3, [r7, #11]
    LCD_Signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	72bb      	strb	r3, [r7, #10]
    GPIO_Init(&LCD_Signal);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fa59 	bl	8000fec <GPIO_Init>

    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LCD_Signal);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fa53 	bl	8000fec <GPIO_Init>

    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000b46:	2302      	movs	r3, #2
 8000b48:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LCD_Signal);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fa4d 	bl	8000fec <GPIO_Init>

    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000b52:	2303      	movs	r3, #3
 8000b54:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LCD_Signal);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fa47 	bl	8000fec <GPIO_Init>

    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LCD_Signal);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa41 	bl	8000fec <GPIO_Init>

    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LCD_Signal);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fa3b 	bl	8000fec <GPIO_Init>

    LCD_Signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000b76:	2306      	movs	r3, #6
 8000b78:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LCD_Signal);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fa35 	bl	8000fec <GPIO_Init>


    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	4827      	ldr	r0, [pc, #156]	; (8000c24 <LCD_Init+0x110>)
 8000b88:	f000 fbca 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4824      	ldr	r0, [pc, #144]	; (8000c24 <LCD_Init+0x110>)
 8000b92:	f000 fbc5 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4822      	ldr	r0, [pc, #136]	; (8000c24 <LCD_Init+0x110>)
 8000b9c:	f000 fbc0 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <LCD_Init+0x110>)
 8000ba6:	f000 fbbb 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2104      	movs	r1, #4
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <LCD_Init+0x110>)
 8000bb0:	f000 fbb6 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <LCD_Init+0x110>)
 8000bba:	f000 fbb1 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2106      	movs	r1, #6
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <LCD_Init+0x110>)
 8000bc4:	f000 fbac 	bl	8001320 <GPIO_WriteToOutputPin>

    /* LCD Initialization */
    Delay_ms(40);
 8000bc8:	2028      	movs	r0, #40	; 0x28
 8000bca:	f000 f90f 	bl	8000dec <Delay_ms>

    /* RS = 0; LCD Command */
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4814      	ldr	r0, [pc, #80]	; (8000c24 <LCD_Init+0x110>)
 8000bd4:	f000 fba4 	bl	8001320 <GPIO_WriteToOutputPin>

    /* Read and Write; Writing to LCD */
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <LCD_Init+0x110>)
 8000bde:	f000 fb9f 	bl	8001320 <GPIO_WriteToOutputPin>

    Write4Bits(0x03);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f8b4 	bl	8000d50 <Write4Bits>

    Delay_ms(5);
 8000be8:	2005      	movs	r0, #5
 8000bea:	f000 f8ff 	bl	8000dec <Delay_ms>

    Write4Bits(0x03);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 f8ae 	bl	8000d50 <Write4Bits>

    Delay_us(150);
 8000bf4:	2096      	movs	r0, #150	; 0x96
 8000bf6:	f000 f913 	bl	8000e20 <Delay_us>

    Write4Bits(0x03);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 f8a8 	bl	8000d50 <Write4Bits>
    Write4Bits(0x02);
 8000c00:	2002      	movs	r0, #2
 8000c02:	f000 f8a5 	bl	8000d50 <Write4Bits>

    /* Set command */
    LCD_SendCommand(LCD_CMD_4DL_2N_5X8F);
 8000c06:	2028      	movs	r0, #40	; 0x28
 8000c08:	f000 f80e 	bl	8000c28 <LCD_SendCommand>

    /* Display and cursor ON */
    LCD_SendCommand(LCD_CMD_DON_CURON);
 8000c0c:	200e      	movs	r0, #14
 8000c0e:	f000 f80b 	bl	8000c28 <LCD_SendCommand>

    LCD_DisplayClear();
 8000c12:	f000 f84d 	bl	8000cb0 <LCD_DisplayClear>

    /* Entry mode set */
    LCD_SendCommand(LCD_CMD_INCADD);
 8000c16:	2006      	movs	r0, #6
 8000c18:	f000 f806 	bl	8000c28 <LCD_SendCommand>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40020800 	.word	0x40020800

08000c28 <LCD_SendCommand>:
 *
 * @Note        - None
 *
 *****************************************************************/
void LCD_SendCommand(uint8_t command)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
    /* RS = 0 for LCD Command */
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LCD_SendCommand+0x40>)
 8000c38:	f000 fb72 	bl	8001320 <GPIO_WriteToOutputPin>

    /* RW = 0 for Write */
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <LCD_SendCommand+0x40>)
 8000c42:	f000 fb6d 	bl	8001320 <GPIO_WriteToOutputPin>

    Write4Bits(command >> 4);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f87f 	bl	8000d50 <Write4Bits>
    Write4Bits(command & 0x0F);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f878 	bl	8000d50 <Write4Bits>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40020800 	.word	0x40020800

08000c6c <LCD_PrintChar>:
 *                Then lower nibble of the data will be sent via
 *                D4, D5, D6 and D7 data lines.
 *
 *****************************************************************/
void LCD_PrintChar(uint8_t data)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    /* RS = 1 for User Data */
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <LCD_PrintChar+0x40>)
 8000c7c:	f000 fb50 	bl	8001320 <GPIO_WriteToOutputPin>

    /* RW = 0 for Write */
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <LCD_PrintChar+0x40>)
 8000c86:	f000 fb4b 	bl	8001320 <GPIO_WriteToOutputPin>

    Write4Bits(data >> 4);   /* Higher nibble */
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f85d 	bl	8000d50 <Write4Bits>
    Write4Bits(data & 0x0F); /* Lower nibble  */
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f856 	bl	8000d50 <Write4Bits>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40020800 	.word	0x40020800

08000cb0 <LCD_DisplayClear>:
 *
 * @Note        - None
 *
 *****************************************************************/
void LCD_DisplayClear(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    LCD_SendCommand(LCD_CMD_DIS_CLEAR);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ffb7 	bl	8000c28 <LCD_SendCommand>

    /* Data sheet; Page 24
     * Display clear command execution time is around 2 ms
     */
    Delay_ms(5);
 8000cba:	2005      	movs	r0, #5
 8000cbc:	f000 f896 	bl	8000dec <Delay_ms>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <LCD_DisplayReturnHome>:
 *
 * @Note        - None
 *
 *****************************************************************/
void LCD_DisplayReturnHome(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    LCD_SendCommand(LCD_CMD_DIS_RETURN_HOME);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff ffad 	bl	8000c28 <LCD_SendCommand>

    /* Data sheet; Page 24
     * Display clear command execution time is around 2 ms
     */
    Delay_ms(2);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f000 f88c 	bl	8000dec <Delay_ms>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <LCD_PrintString>:
 *
 * @Note        - None
 *
 *****************************************************************/
void LCD_PrintString(char* message)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    do
    {
        LCD_PrintChar((uint8_t)* message++);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffbf 	bl	8000c6c <LCD_PrintChar>
    }
    while(*message != '\0');
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f4      	bne.n	8000ce0 <LCD_PrintString+0x8>
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <LCD_SetCursor>:
 * 				  column information. Row Number (1 to 2).
 * 				  Column Number (1 to 16) Assuming a 2 X 16 characters display
 *
 *****************************************************************/
void LCD_SetCursor(uint8_t row, uint8_t column)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
    column--;
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	71bb      	strb	r3, [r7, #6]
    switch(row)
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d002      	beq.n	8000d22 <LCD_SetCursor+0x22>
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d009      	beq.n	8000d34 <LCD_SetCursor+0x34>
            /* Set cursor to 2nd row address and add index */
            LCD_SendCommand((column |= 0xC0));
            break;

        default:
            break;
 8000d20:	e011      	b.n	8000d46 <LCD_SetCursor+0x46>
            LCD_SendCommand((column |= 0x80));
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff7b 	bl	8000c28 <LCD_SendCommand>
            break;
 8000d32:	e008      	b.n	8000d46 <LCD_SetCursor+0x46>
            LCD_SendCommand((column |= 0xC0));
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d3a:	71bb      	strb	r3, [r7, #6]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff72 	bl	8000c28 <LCD_SendCommand>
            break;
 8000d44:	bf00      	nop
    }
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Write4Bits>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void Write4Bits(uint8_t value)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	2103      	movs	r1, #3
 8000d66:	4815      	ldr	r0, [pc, #84]	; (8000dbc <Write4Bits+0x6c>)
 8000d68:	f000 fada 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	480f      	ldr	r0, [pc, #60]	; (8000dbc <Write4Bits+0x6c>)
 8000d7e:	f000 facf 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2105      	movs	r1, #5
 8000d92:	480a      	ldr	r0, [pc, #40]	; (8000dbc <Write4Bits+0x6c>)
 8000d94:	f000 fac4 	bl	8001320 <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	2106      	movs	r1, #6
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <Write4Bits+0x6c>)
 8000daa:	f000 fab9 	bl	8001320 <GPIO_WriteToOutputPin>

    LCD_Enable();
 8000dae:	f000 f807 	bl	8000dc0 <LCD_Enable>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <LCD_Enable>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void LCD_Enable(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <LCD_Enable+0x28>)
 8000dca:	f000 faa9 	bl	8001320 <GPIO_WriteToOutputPin>
    Delay_us(10);
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f000 f826 	bl	8000e20 <Delay_us>

    GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <LCD_Enable+0x28>)
 8000dda:	f000 faa1 	bl	8001320 <GPIO_WriteToOutputPin>
    /* Execution time > 37 microseconds */
    Delay_us(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f000 f81e 	bl	8000e20 <Delay_us>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020800 	.word	0x40020800

08000dec <Delay_ms>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void Delay_ms(uint8_t value)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
    for(uint32_t i = 0 ; i < (value * 1000); i++);
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e002      	b.n	8000e02 <Delay_ms+0x16>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d3f3      	bcc.n	8000dfc <Delay_ms+0x10>
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Delay_us>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void Delay_us(uint8_t value)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
    for(uint32_t i = 0 ; i < (value * 1); i++);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	e002      	b.n	8000e36 <Delay_us+0x16>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f8      	bcc.n	8000e30 <Delay_us+0x10>
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
	...

08000e4c <GPIO_PeriClockControl>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d157      	bne.n	8000f0e <GPIO_PeriClockControl+0xc2>
    {
        if(pGPIOx == GPIOA)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a59      	ldr	r2, [pc, #356]	; (8000fc8 <GPIO_PeriClockControl+0x17c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d106      	bne.n	8000e74 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 8000e66:	4b59      	ldr	r3, [pc, #356]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a58      	ldr	r2, [pc, #352]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
        else if(pGPIOx == GPIOH)
        {
            GPIOH_PCLK_DI();
        }
    }
}
 8000e72:	e0a3      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOB)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a56      	ldr	r2, [pc, #344]	; (8000fd0 <GPIO_PeriClockControl+0x184>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d106      	bne.n	8000e8a <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000e7c:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e88:	e098      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOC)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <GPIO_PeriClockControl+0x188>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d106      	bne.n	8000ea0 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000e92:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a4d      	ldr	r2, [pc, #308]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e9e:	e08d      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOD)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <GPIO_PeriClockControl+0x18c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d106      	bne.n	8000eb6 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eb4:	e082      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <GPIO_PeriClockControl+0x190>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d106      	bne.n	8000ecc <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eca:	e077      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a44      	ldr	r2, [pc, #272]	; (8000fe0 <GPIO_PeriClockControl+0x194>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <GPIO_PeriClockControl+0x96>
            GPIOF_PCLK_EN();
 8000ed4:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee0:	e06c      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOG)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a3f      	ldr	r2, [pc, #252]	; (8000fe4 <GPIO_PeriClockControl+0x198>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <GPIO_PeriClockControl+0xac>
            GPIOG_PCLK_EN();
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef6:	e061      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOH)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3b      	ldr	r2, [pc, #236]	; (8000fe8 <GPIO_PeriClockControl+0x19c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d15d      	bne.n	8000fbc <GPIO_PeriClockControl+0x170>
            GPIOH_PCLK_EN();
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f0c:	e056      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        if(pGPIOx == GPIOA)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <GPIO_PeriClockControl+0x17c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d106      	bne.n	8000f24 <GPIO_PeriClockControl+0xd8>
            GPIOA_PCLK_DI();
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f22:	e04b      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOB)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <GPIO_PeriClockControl+0x184>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d106      	bne.n	8000f3a <GPIO_PeriClockControl+0xee>
            GPIOB_PCLK_DI();
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f32:	f023 0302 	bic.w	r3, r3, #2
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f38:	e040      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOC)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <GPIO_PeriClockControl+0x188>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d106      	bne.n	8000f50 <GPIO_PeriClockControl+0x104>
            GPIOC_PCLK_DI();
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f4e:	e035      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOD)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <GPIO_PeriClockControl+0x18c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d106      	bne.n	8000f66 <GPIO_PeriClockControl+0x11a>
            GPIOD_PCLK_DI();
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f5e:	f023 0308 	bic.w	r3, r3, #8
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f64:	e02a      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <GPIO_PeriClockControl+0x190>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d106      	bne.n	8000f7c <GPIO_PeriClockControl+0x130>
            GPIOE_PCLK_DI();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f74:	f023 0310 	bic.w	r3, r3, #16
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f7a:	e01f      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <GPIO_PeriClockControl+0x194>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d106      	bne.n	8000f92 <GPIO_PeriClockControl+0x146>
            GPIOF_PCLK_DI();
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f8a:	f023 0320 	bic.w	r3, r3, #32
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f90:	e014      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOG)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <GPIO_PeriClockControl+0x198>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d106      	bne.n	8000fa8 <GPIO_PeriClockControl+0x15c>
            GPIOG_PCLK_DI();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa6:	e009      	b.n	8000fbc <GPIO_PeriClockControl+0x170>
        else if(pGPIOx == GPIOH)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <GPIO_PeriClockControl+0x19c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d105      	bne.n	8000fbc <GPIO_PeriClockControl+0x170>
            GPIOH_PCLK_DI();
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <GPIO_PeriClockControl+0x180>)
 8000fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40021c00 	.word	0x40021c00

08000fec <GPIO_Init>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

    /* Enable peripheral clock */
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff24 	bl	8000e4c <GPIO_PeriClockControl>

    /* GPIO pin mode configuration */
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	795b      	ldrb	r3, [r3, #5]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d822      	bhi.n	8001052 <GPIO_Init+0x66>
    {
        /* Non interrupt mode */
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	791b      	ldrb	r3, [r3, #4]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing pin
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2103      	movs	r1, #3
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;//Setting pin
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
        temp = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e0c1      	b.n	80011d6 <GPIO_Init+0x1ea>
    }
    else
    {
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d117      	bne.n	800108a <GPIO_Init+0x9e>
        {
            /* Configure the FTSR */
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800105a:	4b47      	ldr	r3, [pc, #284]	; (8001178 <GPIO_Init+0x18c>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	7912      	ldrb	r2, [r2, #4]
 8001062:	4611      	mov	r1, r2
 8001064:	2201      	movs	r2, #1
 8001066:	408a      	lsls	r2, r1
 8001068:	4611      	mov	r1, r2
 800106a:	4a43      	ldr	r2, [pc, #268]	; (8001178 <GPIO_Init+0x18c>)
 800106c:	430b      	orrs	r3, r1
 800106e:	60d3      	str	r3, [r2, #12]
            /* Clear corresponding RTSR bit */
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <GPIO_Init+0x18c>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	7912      	ldrb	r2, [r2, #4]
 8001078:	4611      	mov	r1, r2
 800107a:	2201      	movs	r2, #1
 800107c:	408a      	lsls	r2, r1
 800107e:	43d2      	mvns	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <GPIO_Init+0x18c>)
 8001084:	400b      	ands	r3, r1
 8001086:	6093      	str	r3, [r2, #8]
 8001088:	e035      	b.n	80010f6 <GPIO_Init+0x10a>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	795b      	ldrb	r3, [r3, #5]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d117      	bne.n	80010c2 <GPIO_Init+0xd6>
        {
            /* Configure the RTSR */
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <GPIO_Init+0x18c>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	7912      	ldrb	r2, [r2, #4]
 800109a:	4611      	mov	r1, r2
 800109c:	2201      	movs	r2, #1
 800109e:	408a      	lsls	r2, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a35      	ldr	r2, [pc, #212]	; (8001178 <GPIO_Init+0x18c>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	6093      	str	r3, [r2, #8]
            /* Clear corresponding FTSR bit */
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <GPIO_Init+0x18c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7912      	ldrb	r2, [r2, #4]
 80010b0:	4611      	mov	r1, r2
 80010b2:	2201      	movs	r2, #1
 80010b4:	408a      	lsls	r2, r1
 80010b6:	43d2      	mvns	r2, r2
 80010b8:	4611      	mov	r1, r2
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <GPIO_Init+0x18c>)
 80010bc:	400b      	ands	r3, r1
 80010be:	60d3      	str	r3, [r2, #12]
 80010c0:	e019      	b.n	80010f6 <GPIO_Init+0x10a>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	795b      	ldrb	r3, [r3, #5]
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d115      	bne.n	80010f6 <GPIO_Init+0x10a>
        {
            /* Configure the FTSR */
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <GPIO_Init+0x18c>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7912      	ldrb	r2, [r2, #4]
 80010d2:	4611      	mov	r1, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	408a      	lsls	r2, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	4a27      	ldr	r2, [pc, #156]	; (8001178 <GPIO_Init+0x18c>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	60d3      	str	r3, [r2, #12]
            /* Configure the RTSR */
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <GPIO_Init+0x18c>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	7912      	ldrb	r2, [r2, #4]
 80010e8:	4611      	mov	r1, r2
 80010ea:	2201      	movs	r2, #1
 80010ec:	408a      	lsls	r2, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <GPIO_Init+0x18c>)
 80010f2:	430b      	orrs	r3, r1
 80010f4:	6093      	str	r3, [r2, #8]
        }

        /* Configure GPIO port selection in SYSCFG_EXTICR */
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	791b      	ldrb	r3, [r3, #4]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <GPIO_Init+0x190>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d044      	beq.n	800119c <GPIO_Init+0x1b0>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <GPIO_Init+0x194>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d02b      	beq.n	8001174 <GPIO_Init+0x188>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a18      	ldr	r2, [pc, #96]	; (8001184 <GPIO_Init+0x198>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d024      	beq.n	8001170 <GPIO_Init+0x184>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <GPIO_Init+0x19c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d01d      	beq.n	800116c <GPIO_Init+0x180>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <GPIO_Init+0x1a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d016      	beq.n	8001168 <GPIO_Init+0x17c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <GPIO_Init+0x1a4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00f      	beq.n	8001164 <GPIO_Init+0x178>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <GPIO_Init+0x1a8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d008      	beq.n	8001160 <GPIO_Init+0x174>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <GPIO_Init+0x1ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <GPIO_Init+0x170>
 8001158:	2307      	movs	r3, #7
 800115a:	e020      	b.n	800119e <GPIO_Init+0x1b2>
 800115c:	2300      	movs	r3, #0
 800115e:	e01e      	b.n	800119e <GPIO_Init+0x1b2>
 8001160:	2306      	movs	r3, #6
 8001162:	e01c      	b.n	800119e <GPIO_Init+0x1b2>
 8001164:	2305      	movs	r3, #5
 8001166:	e01a      	b.n	800119e <GPIO_Init+0x1b2>
 8001168:	2304      	movs	r3, #4
 800116a:	e018      	b.n	800119e <GPIO_Init+0x1b2>
 800116c:	2303      	movs	r3, #3
 800116e:	e016      	b.n	800119e <GPIO_Init+0x1b2>
 8001170:	2302      	movs	r3, #2
 8001172:	e014      	b.n	800119e <GPIO_Init+0x1b2>
 8001174:	2301      	movs	r3, #1
 8001176:	e012      	b.n	800119e <GPIO_Init+0x1b2>
 8001178:	40013c00 	.word	0x40013c00
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40021c00 	.word	0x40021c00
 800119c:	2300      	movs	r3, #0
 800119e:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <GPIO_Init+0x328>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <GPIO_Init+0x328>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80011ac:	7c7a      	ldrb	r2, [r7, #17]
 80011ae:	7cbb      	ldrb	r3, [r7, #18]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	fa02 f103 	lsl.w	r1, r2, r3
 80011b6:	4a58      	ldr	r2, [pc, #352]	; (8001318 <GPIO_Init+0x32c>)
 80011b8:	7cfb      	ldrb	r3, [r7, #19]
 80011ba:	3302      	adds	r3, #2
 80011bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        /* Enable EXTI interrupt delivery using IMR */
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011c0:	4b56      	ldr	r3, [pc, #344]	; (800131c <GPIO_Init+0x330>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	7912      	ldrb	r2, [r2, #4]
 80011c8:	4611      	mov	r1, r2
 80011ca:	2201      	movs	r2, #1
 80011cc:	408a      	lsls	r2, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <GPIO_Init+0x330>)
 80011d2:	430b      	orrs	r3, r1
 80011d4:	6013      	str	r3, [r2, #0]
    }

    /* GPIO pin speed configuration */
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	799b      	ldrb	r3, [r3, #6]
 80011da:	461a      	mov	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2103      	movs	r1, #3
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	400a      	ands	r2, r1
 8001204:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6899      	ldr	r1, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	430a      	orrs	r2, r1
 8001214:	609a      	str	r2, [r3, #8]
    temp = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

    /* GPIO pull up/down settings configuration */
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	79db      	ldrb	r3, [r3, #7]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2103      	movs	r1, #3
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	400a      	ands	r2, r1
 8001248:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68d9      	ldr	r1, [r3, #12]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
    temp = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]

    /* GPIO output type configuration */
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7a1b      	ldrb	r3, [r3, #8]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	4619      	mov	r1, r3
 800127a:	2301      	movs	r3, #1
 800127c:	408b      	lsls	r3, r1
 800127e:	43db      	mvns	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]
    temp = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]

    /* GPIO alt functionality configuration */
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	795b      	ldrb	r3, [r3, #5]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d131      	bne.n	800130a <GPIO_Init+0x31e>
    {
        /* Alt functionality registers configuration */
        uint8_t afrBitNum, afrLowHighReg;

        afrLowHighReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	791b      	ldrb	r3, [r3, #4]
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	743b      	strb	r3, [r7, #16]
        afrBitNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[afrLowHighReg] &= ~(0xF << (4 * afrBitNum));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	7c3a      	ldrb	r2, [r7, #16]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	7c3a      	ldrb	r2, [r7, #16]
 80012d8:	4001      	ands	r1, r0
 80012da:	3208      	adds	r2, #8
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[afrLowHighReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afrBitNum);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	7c3a      	ldrb	r2, [r7, #16]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7a5b      	ldrb	r3, [r3, #9]
 80012f0:	461a      	mov	r2, r3
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	7c3a      	ldrb	r2, [r7, #16]
 8001302:	4301      	orrs	r1, r0
 8001304:	3208      	adds	r2, #8
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40013c00 	.word	0x40013c00

08001320 <GPIO_WriteToOutputPin>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
    if(Value == GPIO_PIN_SET)
 8001330:	78bb      	ldrb	r3, [r7, #2]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d109      	bne.n	800134a <GPIO_WriteToOutputPin+0x2a>
    {
        /* Write 1 to the output data register at the bit field corresponding to the pin number */
        pGPIOx->ODR |= ( 1 << PinNumber );
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	615a      	str	r2, [r3, #20]
    else
    {
        /* Write 0 to the output data register at the bit field corresponding to the pin number */
        pGPIOx->ODR &= ~( 1 << PinNumber );	//Clear pin
    }
}
 8001348:	e009      	b.n	800135e <GPIO_WriteToOutputPin+0x3e>
        pGPIOx->ODR &= ~( 1 << PinNumber );	//Clear pin
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	43d2      	mvns	r2, r2
 8001358:	401a      	ands	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	615a      	str	r2, [r3, #20]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <I2C_PeriClockControl>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d120      	bne.n	80013bc <I2C_PeriClockControl+0x54>
    {
        if(pI2Cx == I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a22      	ldr	r2, [pc, #136]	; (8001408 <I2C_PeriClockControl+0xa0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d106      	bne.n	8001390 <I2C_PeriClockControl+0x28>
        {
            I2C1_PCLK_EN();
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <I2C_PeriClockControl+0xa4>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a21      	ldr	r2, [pc, #132]	; (800140c <I2C_PeriClockControl+0xa4>)
 8001388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
        else if(pI2Cx == I2C3)
        {
            I2C3_PCLK_DI();
        }
    }
}
 800138e:	e035      	b.n	80013fc <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <I2C_PeriClockControl+0xa8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d106      	bne.n	80013a6 <I2C_PeriClockControl+0x3e>
            I2C2_PCLK_EN();
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <I2C_PeriClockControl+0xa4>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <I2C_PeriClockControl+0xa4>)
 800139e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013a4:	e02a      	b.n	80013fc <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <I2C_PeriClockControl+0xac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d126      	bne.n	80013fc <I2C_PeriClockControl+0x94>
            I2C3_PCLK_EN();
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013ba:	e01f      	b.n	80013fc <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <I2C_PeriClockControl+0xa0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d106      	bne.n	80013d2 <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a10      	ldr	r2, [pc, #64]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013d0:	e014      	b.n	80013fc <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <I2C_PeriClockControl+0xa8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d106      	bne.n	80013e8 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013e6:	e009      	b.n	80013fc <I2C_PeriClockControl+0x94>
        else if(pI2Cx == I2C3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <I2C_PeriClockControl+0xac>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d105      	bne.n	80013fc <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <I2C_PeriClockControl+0xa4>)
 80013f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40005400 	.word	0x40005400
 800140c:	40023800 	.word	0x40023800
 8001410:	40005800 	.word	0x40005800
 8001414:	40005c00 	.word	0x40005c00

08001418 <I2C_Init>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

    /* Enabling clock for I2C peripheral */
    I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff9c 	bl	8001368 <I2C_PeriClockControl>

    /* ACK control bit */
    tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7a5b      	ldrb	r3, [r3, #9]
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR1 = tempreg;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

    /* CR2 FREQ field configuration */
    tempreg = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
    tempreg|= RCC_GetPCLK1Value() / 1000000U;
 800144a:	f000 fa4f 	bl	80018ec <RCC_GetPCLK1Value>
 800144e:	4603      	mov	r3, r0
 8001450:	4a47      	ldr	r2, [pc, #284]	; (8001570 <I2C_Init+0x158>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001468:	605a      	str	r2, [r3, #4]

    /* Programming device own address */
    tempreg = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
    tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7a1b      	ldrb	r3, [r3, #8]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
    tempreg |= (1 << I2C_OAR1_ADDMODE);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	609a      	str	r2, [r3, #8]

    /* CCR calculations */
    uint16_t ccr_value = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	817b      	strh	r3, [r7, #10]
    tempreg = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
    if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a36      	ldr	r2, [pc, #216]	; (8001574 <I2C_Init+0x15c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d80f      	bhi.n	80014be <I2C_Init+0xa6>
    {
        /* Standard mode */
        ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800149e:	f000 fa25 	bl	80018ec <RCC_GetPCLK1Value>
 80014a2:	4602      	mov	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	817b      	strh	r3, [r7, #10]
        tempreg |= (ccr_value & 0xFFF);
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e02d      	b.n	800151a <I2C_Init+0x102>
    }
    else
    {
        /* Fast mode */
        tempreg |= (1 << 15);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c4:	60fb      	str	r3, [r7, #12]
        tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	895b      	ldrh	r3, [r3, #10]
 80014ca:	039b      	lsls	r3, r3, #14
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	895b      	ldrh	r3, [r3, #10]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <I2C_Init+0xdc>
        {
            ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80014dc:	f000 fa06 	bl	80018ec <RCC_GetPCLK1Value>
 80014e0:	4601      	mov	r1, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	817b      	strh	r3, [r7, #10]
 80014f2:	e00c      	b.n	800150e <I2C_Init+0xf6>
        }
        else
        {
            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80014f4:	f000 f9fa 	bl	80018ec <RCC_GetPCLK1Value>
 80014f8:	4601      	mov	r1, r0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	009a      	lsls	r2, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	fbb1 f3f3 	udiv	r3, r1, r3
 800150c:	817b      	strh	r3, [r7, #10]
        }
        tempreg |= (ccr_value & 0xFFF);
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
    }
    pI2CHandle->pI2Cx->CCR = tempreg;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	61da      	str	r2, [r3, #28]

    /* TRISE Configuration */
    if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <I2C_Init+0x15c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d809      	bhi.n	8001540 <I2C_Init+0x128>
    {
        /* Standard mode */
        tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800152c:	f000 f9de 	bl	80018ec <RCC_GetPCLK1Value>
 8001530:	4603      	mov	r3, r0
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <I2C_Init+0x158>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00c      	b.n	800155a <I2C_Init+0x142>
    }
    else
    {
        /* Fast mode */
        tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000U ) + 1;
 8001540:	f000 f9d4 	bl	80018ec <RCC_GetPCLK1Value>
 8001544:	4603      	mov	r3, r0
 8001546:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <I2C_Init+0x158>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	0c9b      	lsrs	r3, r3, #18
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
    }

    pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001564:	621a      	str	r2, [r3, #32]
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	431bde83 	.word	0x431bde83
 8001574:	000186a0 	.word	0x000186a0

08001578 <I2C_GetFlagStatus>:
 *
 * @Note        - None
 *
 *****************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
    if(pI2Cx->SR1 & FlagName)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <I2C_GetFlagStatus+0x1a>
    {
        return FLAG_SET;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <I2C_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <I2C_PeripheralControl>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <I2C_PeripheralControl+0x20>
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 80015bc:	e005      	b.n	80015ca <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0201 	bic.w	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <I2C_MasterSendData>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Length, uint8_t SlaveAddr, uint8_t Sr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	70fb      	strb	r3, [r7, #3]
    /* Generating start condition */
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f900 	bl	80017ec <I2C_GenerateStartCondition>

    /* Confirming start generation is completed by checking SB flag in SR1 */
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
    while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) );
 80015ec:	bf00      	nop
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ffbf 	bl	8001578 <I2C_GetFlagStatus>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f6      	beq.n	80015ee <I2C_MasterSendData+0x1a>

    /* Send the address of the slave with r/nm bit set to w(0) (total 8 bits) */
    I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f90d 	bl	8001828 <I2C_ExecuteAddressPhaseWrite>

    /* Confirming address phase is completed by checking ADDR flag in SR1 */
    while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) );
 800160e:	bf00      	nop
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffae 	bl	8001578 <I2C_GetFlagStatus>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f6      	beq.n	8001610 <I2C_MasterSendData+0x3c>

    /* Clearing the address flag according to its software sequence */
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
    I2C_ClearAddrFlag(pI2CHandle);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f92a 	bl	800187c <I2C_ClearAddrFlag>

    /* Send the data until length reaches 0 value */
    while(Length > 0)
 8001628:	e014      	b.n	8001654 <I2C_MasterSendData+0x80>
    {
        /* Waiting untill TX is set */
        while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE) );
 800162a:	bf00      	nop
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffa0 	bl	8001578 <I2C_GetFlagStatus>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f6      	beq.n	800162c <I2C_MasterSendData+0x58>
        pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	611a      	str	r2, [r3, #16]
        pTxBuffer++;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
        Length--;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3b01      	subs	r3, #1
 8001652:	607b      	str	r3, [r7, #4]
    while(Length > 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e7      	bne.n	800162a <I2C_MasterSendData+0x56>
    }

    /* Waiting for TXE=1 and BTF=1 before generating STOP condition */
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
    while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE) );
 800165a:	bf00      	nop
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff88 	bl	8001578 <I2C_GetFlagStatus>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f6      	beq.n	800165c <I2C_MasterSendData+0x88>
    while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF) );
 800166e:	bf00      	nop
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2104      	movs	r1, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff7e 	bl	8001578 <I2C_GetFlagStatus>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f6      	beq.n	8001670 <I2C_MasterSendData+0x9c>

    /* Generate STOP condition and master not need to wait for the completion of stop condition */
	//   Note: generating STOP, automatically clears the BTF
    if(Sr == I2C_DISABLE_SR)
 8001682:	7e3b      	ldrb	r3, [r7, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d104      	bne.n	8001692 <I2C_MasterSendData+0xbe>
    {
        I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f8bc 	bl	800180a <I2C_GenerateStopCondition>
    }
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <I2C_MasterReceiveData>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Length, uint8_t SlaveAddr, uint8_t Sr)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	70fb      	strb	r3, [r7, #3]
    /* Generating start condition */
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f89d 	bl	80017ec <I2C_GenerateStartCondition>

    /* Confirming start generation is completed by checking SB flag in SR1 */
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
    while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) );
 80016b2:	bf00      	nop
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff5c 	bl	8001578 <I2C_GetFlagStatus>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f6      	beq.n	80016b4 <I2C_MasterReceiveData+0x1a>

    /* Send the address of the slave with r/nm bit set to w(0) (total 8 bits) */
    I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f8bf 	bl	8001852 <I2C_ExecuteAddressPhaseRead>

    /* Confirming address phase is completed by checking ADDR flag in SR1 */
    while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) );
 80016d4:	bf00      	nop
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2102      	movs	r1, #2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff4b 	bl	8001578 <I2C_GetFlagStatus>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f6      	beq.n	80016d6 <I2C_MasterReceiveData+0x3c>

    /* Procedure to read only 1 byte from slave */
    if(Length == 1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d121      	bne.n	8001732 <I2C_MasterReceiveData+0x98>
    {
        /* Disable acknowledgment */
        I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f85e 	bl	80017b6 <I2C_ManageAcking>

        /* Clear address flag */
        I2C_ClearAddrFlag(pI2CHandle);
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f8be 	bl	800187c <I2C_ClearAddrFlag>

        /* Wait until RXNE becomes 1 */
        while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE) );
 8001700:	bf00      	nop
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff35 	bl	8001578 <I2C_GetFlagStatus>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f6      	beq.n	8001702 <I2C_MasterReceiveData+0x68>

        /* Generate STOP condition and master not need to wait for the completion of stop condition */
        if(Sr == I2C_DISABLE_SR)
 8001714:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d104      	bne.n	8001726 <I2C_MasterReceiveData+0x8c>
        {
            I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f872 	bl	800180a <I2C_GenerateStopCondition>
        }

        /* Read the data into buffer */
        *pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	701a      	strb	r2, [r3, #0]
    }

    /* Procedure to read data from slave when Len > 1 */
    if(Length > 1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d930      	bls.n	800179a <I2C_MasterReceiveData+0x100>
    {
        /* Clear address flag */
        I2C_ClearAddrFlag(pI2CHandle);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f89f 	bl	800187c <I2C_ClearAddrFlag>

        /* Read the data into buffer until length becomes 0 */
        for(uint32_t i = Length; i > 0; i--)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e027      	b.n	8001794 <I2C_MasterReceiveData+0xfa>
        {
            /* Wait until RXNE becomes 1 */
            while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE) );
 8001744:	bf00      	nop
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff13 	bl	8001578 <I2C_GetFlagStatus>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f6      	beq.n	8001746 <I2C_MasterReceiveData+0xac>

            /* If last 2 bits are remaining */
            if(i == 2)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d10e      	bne.n	800177c <I2C_MasterReceiveData+0xe2>
            {
                /* Clear the ACK bit */
                I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f826 	bl	80017b6 <I2C_ManageAcking>

                /* Generate STOP condition and master not need to wait for the completion of stop condition */
                if(Sr == I2C_DISABLE_SR)
 800176a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d104      	bne.n	800177c <I2C_MasterReceiveData+0xe2>
                {
                    I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f847 	bl	800180a <I2C_GenerateStopCondition>
                }
            }

            /* Read the data from data register in to the buffer */
            *pRxBuffer = pI2CHandle->pI2Cx->DR;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	701a      	strb	r2, [r3, #0]

            /* Increment the buffer address */
            pRxBuffer++;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3301      	adds	r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
        for(uint32_t i = Length; i > 0; i--)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3b01      	subs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1d4      	bne.n	8001744 <I2C_MasterReceiveData+0xaa>

        }
    }

    /* Re-enable ACK */
    if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	7a5b      	ldrb	r3, [r3, #9]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d105      	bne.n	80017ae <I2C_MasterReceiveData+0x114>
    {
        I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f804 	bl	80017b6 <I2C_ManageAcking>
    }
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <I2C_ManageAcking>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == I2C_ACK_ENABLE)
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d106      	bne.n	80017d6 <I2C_ManageAcking+0x20>
    {
        /* Enable ACK */
        pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable ACK */
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
    }
}
 80017d4:	e005      	b.n	80017e2 <I2C_ManageAcking+0x2c>
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <I2C_GenerateStartCondition>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <I2C_GenerateStopCondition>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <I2C_ExecuteAddressPhaseWrite>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
    SlaveAddr = SlaveAddr << 1;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	70fb      	strb	r3, [r7, #3]
    /* SlaveAddr is Slave address + r/nw bit=0 */
    SlaveAddr &= ~(1);
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	70fb      	strb	r3, [r7, #3]
    pI2Cx->DR = SlaveAddr;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <I2C_ExecuteAddressPhaseRead>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
    SlaveAddr = SlaveAddr << 1;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	70fb      	strb	r3, [r7, #3]
    /* SlaveAddr is Slave address + r/nw bit=1 */
    SlaveAddr |= 1;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	70fb      	strb	r3, [r7, #3]
    pI2Cx->DR = SlaveAddr;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <I2C_ClearAddrFlag>:
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    uint32_t dummy_read;

    /* Checking for device mode */
    if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01f      	beq.n	80018d2 <I2C_ClearAddrFlag+0x56>
    {
        /* Device is in master mode */
        if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7f1b      	ldrb	r3, [r3, #28]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d112      	bne.n	80018c0 <I2C_ClearAddrFlag+0x44>
        {
            if(pI2CHandle->RxSize == 1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d11f      	bne.n	80018e2 <I2C_ClearAddrFlag+0x66>
            {
                /* Disabling ACK */
                I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff84 	bl	80017b6 <I2C_ManageAcking>

                /* Clearing ADDR flag, reading SR1 and SR2 */
                dummy_read = pI2CHandle->pI2Cx->SR1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	60fb      	str	r3, [r7, #12]
                dummy_read = pI2CHandle->pI2Cx->SR2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	60fb      	str	r3, [r7, #12]
        /* Clearing ADDR flag, reading SR1 and SR2 */
        dummy_read = pI2CHandle->pI2Cx->SR1;
        dummy_read = pI2CHandle->pI2Cx->SR2;
        (void)dummy_read;
    }
}
 80018be:	e010      	b.n	80018e2 <I2C_ClearAddrFlag+0x66>
            dummy_read = pI2CHandle->pI2Cx->SR1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	60fb      	str	r3, [r7, #12]
            dummy_read = pI2CHandle->pI2Cx->SR2;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	60fb      	str	r3, [r7, #12]
}
 80018d0:	e007      	b.n	80018e2 <I2C_ClearAddrFlag+0x66>
        dummy_read = pI2CHandle->pI2Cx->SR1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	60fb      	str	r3, [r7, #12]
        dummy_read = pI2CHandle->pI2Cx->SR2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	60fb      	str	r3, [r7, #12]
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <RCC_GetPCLK1Value>:
 *
 * @Note        - None
 *
 *****************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1p;

    clksrc = ((RCC->CFGR >> 2) & 0x3);
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <RCC_GetPCLK1Value+0x9c>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	727b      	strb	r3, [r7, #9]

    if(clksrc == 0)
 8001900:	7a7b      	ldrb	r3, [r7, #9]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <RCC_GetPCLK1Value+0x20>
    {
        SystemClk = 16000000;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <RCC_GetPCLK1Value+0xa0>)
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e00b      	b.n	8001924 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 1)
 800190c:	7a7b      	ldrb	r3, [r7, #9]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <RCC_GetPCLK1Value+0x2c>
    {
        SystemClk = 8000000;
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <RCC_GetPCLK1Value+0xa4>)
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e005      	b.n	8001924 <RCC_GetPCLK1Value+0x38>
    }
    else if(clksrc == 2)
 8001918:	7a7b      	ldrb	r3, [r7, #9]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d102      	bne.n	8001924 <RCC_GetPCLK1Value+0x38>
    {
        SystemClk = RCC_GetPLLOutputClock();
 800191e:	f000 f83d 	bl	800199c <RCC_GetPLLOutputClock>
 8001922:	60f8      	str	r0, [r7, #12]
    }

    /* AHBP */
    temp = ((RCC->CFGR >> 4) & 0xF);
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <RCC_GetPCLK1Value+0x9c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	723b      	strb	r3, [r7, #8]

    if(temp < 8)
 8001932:	7a3b      	ldrb	r3, [r7, #8]
 8001934:	2b07      	cmp	r3, #7
 8001936:	d802      	bhi.n	800193e <RCC_GetPCLK1Value+0x52>
    {
        ahbp = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	72fb      	strb	r3, [r7, #11]
 800193c:	e005      	b.n	800194a <RCC_GetPCLK1Value+0x5e>
    }
    else
    {
        ahbp = AHB_Prescaler[temp-8];
 800193e:	7a3b      	ldrb	r3, [r7, #8]
 8001940:	3b08      	subs	r3, #8
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <RCC_GetPCLK1Value+0xa8>)
 8001944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001948:	72fb      	strb	r3, [r7, #11]
    }

    /* APB1 */
    temp = ((RCC->CFGR >> 10) & 0x7);
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <RCC_GetPCLK1Value+0x9c>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	723b      	strb	r3, [r7, #8]

    if(temp < 4)
 8001958:	7a3b      	ldrb	r3, [r7, #8]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d802      	bhi.n	8001964 <RCC_GetPCLK1Value+0x78>
    {
        apb1p = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	72bb      	strb	r3, [r7, #10]
 8001962:	e004      	b.n	800196e <RCC_GetPCLK1Value+0x82>
    }
    else
    {
        apb1p = APBx_Prescaler[temp-4];
 8001964:	7a3b      	ldrb	r3, [r7, #8]
 8001966:	3b04      	subs	r3, #4
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <RCC_GetPCLK1Value+0xac>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	72bb      	strb	r3, [r7, #10]
    }

    pclk1 = (SystemClk / ahbp) / apb1p;
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	fbb2 f2f3 	udiv	r2, r2, r3
 8001976:	7abb      	ldrb	r3, [r7, #10]
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	607b      	str	r3, [r7, #4]

    return pclk1;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	00f42400 	.word	0x00f42400
 8001990:	007a1200 	.word	0x007a1200
 8001994:	20000000 	.word	0x20000000
 8001998:	20000010 	.word	0x20000010

0800199c <RCC_GetPLLOutputClock>:
 *
 * @Note        - None
 *
 *****************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    /* Not used for now */
    return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
	...

080019ac <__errno>:
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <__errno+0x8>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000014 	.word	0x20000014

080019b8 <__libc_init_array>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	4d0d      	ldr	r5, [pc, #52]	; (80019f0 <__libc_init_array+0x38>)
 80019bc:	4c0d      	ldr	r4, [pc, #52]	; (80019f4 <__libc_init_array+0x3c>)
 80019be:	1b64      	subs	r4, r4, r5
 80019c0:	10a4      	asrs	r4, r4, #2
 80019c2:	2600      	movs	r6, #0
 80019c4:	42a6      	cmp	r6, r4
 80019c6:	d109      	bne.n	80019dc <__libc_init_array+0x24>
 80019c8:	4d0b      	ldr	r5, [pc, #44]	; (80019f8 <__libc_init_array+0x40>)
 80019ca:	4c0c      	ldr	r4, [pc, #48]	; (80019fc <__libc_init_array+0x44>)
 80019cc:	f000 fd18 	bl	8002400 <_init>
 80019d0:	1b64      	subs	r4, r4, r5
 80019d2:	10a4      	asrs	r4, r4, #2
 80019d4:	2600      	movs	r6, #0
 80019d6:	42a6      	cmp	r6, r4
 80019d8:	d105      	bne.n	80019e6 <__libc_init_array+0x2e>
 80019da:	bd70      	pop	{r4, r5, r6, pc}
 80019dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e0:	4798      	blx	r3
 80019e2:	3601      	adds	r6, #1
 80019e4:	e7ee      	b.n	80019c4 <__libc_init_array+0xc>
 80019e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ea:	4798      	blx	r3
 80019ec:	3601      	adds	r6, #1
 80019ee:	e7f2      	b.n	80019d6 <__libc_init_array+0x1e>
 80019f0:	08002510 	.word	0x08002510
 80019f4:	08002510 	.word	0x08002510
 80019f8:	08002510 	.word	0x08002510
 80019fc:	08002514 	.word	0x08002514

08001a00 <memset>:
 8001a00:	4402      	add	r2, r0
 8001a02:	4603      	mov	r3, r0
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d100      	bne.n	8001a0a <memset+0xa>
 8001a08:	4770      	bx	lr
 8001a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a0e:	e7f9      	b.n	8001a04 <memset+0x4>

08001a10 <_puts_r>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	460e      	mov	r6, r1
 8001a14:	4605      	mov	r5, r0
 8001a16:	b118      	cbz	r0, 8001a20 <_puts_r+0x10>
 8001a18:	6983      	ldr	r3, [r0, #24]
 8001a1a:	b90b      	cbnz	r3, 8001a20 <_puts_r+0x10>
 8001a1c:	f000 fa44 	bl	8001ea8 <__sinit>
 8001a20:	69ab      	ldr	r3, [r5, #24]
 8001a22:	68ac      	ldr	r4, [r5, #8]
 8001a24:	b913      	cbnz	r3, 8001a2c <_puts_r+0x1c>
 8001a26:	4628      	mov	r0, r5
 8001a28:	f000 fa3e 	bl	8001ea8 <__sinit>
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <_puts_r+0xd0>)
 8001a2e:	429c      	cmp	r4, r3
 8001a30:	d120      	bne.n	8001a74 <_puts_r+0x64>
 8001a32:	686c      	ldr	r4, [r5, #4]
 8001a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a36:	07db      	lsls	r3, r3, #31
 8001a38:	d405      	bmi.n	8001a46 <_puts_r+0x36>
 8001a3a:	89a3      	ldrh	r3, [r4, #12]
 8001a3c:	0598      	lsls	r0, r3, #22
 8001a3e:	d402      	bmi.n	8001a46 <_puts_r+0x36>
 8001a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a42:	f000 facf 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	0719      	lsls	r1, r3, #28
 8001a4a:	d51d      	bpl.n	8001a88 <_puts_r+0x78>
 8001a4c:	6923      	ldr	r3, [r4, #16]
 8001a4e:	b1db      	cbz	r3, 8001a88 <_puts_r+0x78>
 8001a50:	3e01      	subs	r6, #1
 8001a52:	68a3      	ldr	r3, [r4, #8]
 8001a54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60a3      	str	r3, [r4, #8]
 8001a5c:	bb39      	cbnz	r1, 8001aae <_puts_r+0x9e>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da38      	bge.n	8001ad4 <_puts_r+0xc4>
 8001a62:	4622      	mov	r2, r4
 8001a64:	210a      	movs	r1, #10
 8001a66:	4628      	mov	r0, r5
 8001a68:	f000 f848 	bl	8001afc <__swbuf_r>
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	d011      	beq.n	8001a94 <_puts_r+0x84>
 8001a70:	250a      	movs	r5, #10
 8001a72:	e011      	b.n	8001a98 <_puts_r+0x88>
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <_puts_r+0xd4>)
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d101      	bne.n	8001a7e <_puts_r+0x6e>
 8001a7a:	68ac      	ldr	r4, [r5, #8]
 8001a7c:	e7da      	b.n	8001a34 <_puts_r+0x24>
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <_puts_r+0xd8>)
 8001a80:	429c      	cmp	r4, r3
 8001a82:	bf08      	it	eq
 8001a84:	68ec      	ldreq	r4, [r5, #12]
 8001a86:	e7d5      	b.n	8001a34 <_puts_r+0x24>
 8001a88:	4621      	mov	r1, r4
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f000 f888 	bl	8001ba0 <__swsetup_r>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0dd      	beq.n	8001a50 <_puts_r+0x40>
 8001a94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a9a:	07da      	lsls	r2, r3, #31
 8001a9c:	d405      	bmi.n	8001aaa <_puts_r+0x9a>
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	059b      	lsls	r3, r3, #22
 8001aa2:	d402      	bmi.n	8001aaa <_puts_r+0x9a>
 8001aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aa6:	f000 fa9e 	bl	8001fe6 <__retarget_lock_release_recursive>
 8001aaa:	4628      	mov	r0, r5
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da04      	bge.n	8001abc <_puts_r+0xac>
 8001ab2:	69a2      	ldr	r2, [r4, #24]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dc06      	bgt.n	8001ac6 <_puts_r+0xb6>
 8001ab8:	290a      	cmp	r1, #10
 8001aba:	d004      	beq.n	8001ac6 <_puts_r+0xb6>
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	6022      	str	r2, [r4, #0]
 8001ac2:	7019      	strb	r1, [r3, #0]
 8001ac4:	e7c5      	b.n	8001a52 <_puts_r+0x42>
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f000 f817 	bl	8001afc <__swbuf_r>
 8001ace:	3001      	adds	r0, #1
 8001ad0:	d1bf      	bne.n	8001a52 <_puts_r+0x42>
 8001ad2:	e7df      	b.n	8001a94 <_puts_r+0x84>
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	250a      	movs	r5, #10
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	6022      	str	r2, [r4, #0]
 8001adc:	701d      	strb	r5, [r3, #0]
 8001ade:	e7db      	b.n	8001a98 <_puts_r+0x88>
 8001ae0:	080024d0 	.word	0x080024d0
 8001ae4:	080024f0 	.word	0x080024f0
 8001ae8:	080024b0 	.word	0x080024b0

08001aec <puts>:
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <puts+0xc>)
 8001aee:	4601      	mov	r1, r0
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	f7ff bf8d 	b.w	8001a10 <_puts_r>
 8001af6:	bf00      	nop
 8001af8:	20000014 	.word	0x20000014

08001afc <__swbuf_r>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	460e      	mov	r6, r1
 8001b00:	4614      	mov	r4, r2
 8001b02:	4605      	mov	r5, r0
 8001b04:	b118      	cbz	r0, 8001b0e <__swbuf_r+0x12>
 8001b06:	6983      	ldr	r3, [r0, #24]
 8001b08:	b90b      	cbnz	r3, 8001b0e <__swbuf_r+0x12>
 8001b0a:	f000 f9cd 	bl	8001ea8 <__sinit>
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <__swbuf_r+0x98>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	d12b      	bne.n	8001b6c <__swbuf_r+0x70>
 8001b14:	686c      	ldr	r4, [r5, #4]
 8001b16:	69a3      	ldr	r3, [r4, #24]
 8001b18:	60a3      	str	r3, [r4, #8]
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	071a      	lsls	r2, r3, #28
 8001b1e:	d52f      	bpl.n	8001b80 <__swbuf_r+0x84>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	b36b      	cbz	r3, 8001b80 <__swbuf_r+0x84>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	1ac0      	subs	r0, r0, r3
 8001b2a:	6963      	ldr	r3, [r4, #20]
 8001b2c:	b2f6      	uxtb	r6, r6
 8001b2e:	4283      	cmp	r3, r0
 8001b30:	4637      	mov	r7, r6
 8001b32:	dc04      	bgt.n	8001b3e <__swbuf_r+0x42>
 8001b34:	4621      	mov	r1, r4
 8001b36:	4628      	mov	r0, r5
 8001b38:	f000 f922 	bl	8001d80 <_fflush_r>
 8001b3c:	bb30      	cbnz	r0, 8001b8c <__swbuf_r+0x90>
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60a3      	str	r3, [r4, #8]
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	6022      	str	r2, [r4, #0]
 8001b4a:	701e      	strb	r6, [r3, #0]
 8001b4c:	6963      	ldr	r3, [r4, #20]
 8001b4e:	3001      	adds	r0, #1
 8001b50:	4283      	cmp	r3, r0
 8001b52:	d004      	beq.n	8001b5e <__swbuf_r+0x62>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	07db      	lsls	r3, r3, #31
 8001b58:	d506      	bpl.n	8001b68 <__swbuf_r+0x6c>
 8001b5a:	2e0a      	cmp	r6, #10
 8001b5c:	d104      	bne.n	8001b68 <__swbuf_r+0x6c>
 8001b5e:	4621      	mov	r1, r4
 8001b60:	4628      	mov	r0, r5
 8001b62:	f000 f90d 	bl	8001d80 <_fflush_r>
 8001b66:	b988      	cbnz	r0, 8001b8c <__swbuf_r+0x90>
 8001b68:	4638      	mov	r0, r7
 8001b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <__swbuf_r+0x9c>)
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	d101      	bne.n	8001b76 <__swbuf_r+0x7a>
 8001b72:	68ac      	ldr	r4, [r5, #8]
 8001b74:	e7cf      	b.n	8001b16 <__swbuf_r+0x1a>
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <__swbuf_r+0xa0>)
 8001b78:	429c      	cmp	r4, r3
 8001b7a:	bf08      	it	eq
 8001b7c:	68ec      	ldreq	r4, [r5, #12]
 8001b7e:	e7ca      	b.n	8001b16 <__swbuf_r+0x1a>
 8001b80:	4621      	mov	r1, r4
 8001b82:	4628      	mov	r0, r5
 8001b84:	f000 f80c 	bl	8001ba0 <__swsetup_r>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d0cb      	beq.n	8001b24 <__swbuf_r+0x28>
 8001b8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001b90:	e7ea      	b.n	8001b68 <__swbuf_r+0x6c>
 8001b92:	bf00      	nop
 8001b94:	080024d0 	.word	0x080024d0
 8001b98:	080024f0 	.word	0x080024f0
 8001b9c:	080024b0 	.word	0x080024b0

08001ba0 <__swsetup_r>:
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <__swsetup_r+0xcc>)
 8001ba2:	b570      	push	{r4, r5, r6, lr}
 8001ba4:	681d      	ldr	r5, [r3, #0]
 8001ba6:	4606      	mov	r6, r0
 8001ba8:	460c      	mov	r4, r1
 8001baa:	b125      	cbz	r5, 8001bb6 <__swsetup_r+0x16>
 8001bac:	69ab      	ldr	r3, [r5, #24]
 8001bae:	b913      	cbnz	r3, 8001bb6 <__swsetup_r+0x16>
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f000 f979 	bl	8001ea8 <__sinit>
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <__swsetup_r+0xd0>)
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	d10f      	bne.n	8001bdc <__swsetup_r+0x3c>
 8001bbc:	686c      	ldr	r4, [r5, #4]
 8001bbe:	89a3      	ldrh	r3, [r4, #12]
 8001bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bc4:	0719      	lsls	r1, r3, #28
 8001bc6:	d42c      	bmi.n	8001c22 <__swsetup_r+0x82>
 8001bc8:	06dd      	lsls	r5, r3, #27
 8001bca:	d411      	bmi.n	8001bf0 <__swsetup_r+0x50>
 8001bcc:	2309      	movs	r3, #9
 8001bce:	6033      	str	r3, [r6, #0]
 8001bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bd4:	81a3      	strh	r3, [r4, #12]
 8001bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bda:	e03e      	b.n	8001c5a <__swsetup_r+0xba>
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <__swsetup_r+0xd4>)
 8001bde:	429c      	cmp	r4, r3
 8001be0:	d101      	bne.n	8001be6 <__swsetup_r+0x46>
 8001be2:	68ac      	ldr	r4, [r5, #8]
 8001be4:	e7eb      	b.n	8001bbe <__swsetup_r+0x1e>
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <__swsetup_r+0xd8>)
 8001be8:	429c      	cmp	r4, r3
 8001bea:	bf08      	it	eq
 8001bec:	68ec      	ldreq	r4, [r5, #12]
 8001bee:	e7e6      	b.n	8001bbe <__swsetup_r+0x1e>
 8001bf0:	0758      	lsls	r0, r3, #29
 8001bf2:	d512      	bpl.n	8001c1a <__swsetup_r+0x7a>
 8001bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf6:	b141      	cbz	r1, 8001c0a <__swsetup_r+0x6a>
 8001bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bfc:	4299      	cmp	r1, r3
 8001bfe:	d002      	beq.n	8001c06 <__swsetup_r+0x66>
 8001c00:	4630      	mov	r0, r6
 8001c02:	f000 fa57 	bl	80020b4 <_free_r>
 8001c06:	2300      	movs	r3, #0
 8001c08:	6363      	str	r3, [r4, #52]	; 0x34
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c10:	81a3      	strh	r3, [r4, #12]
 8001c12:	2300      	movs	r3, #0
 8001c14:	6063      	str	r3, [r4, #4]
 8001c16:	6923      	ldr	r3, [r4, #16]
 8001c18:	6023      	str	r3, [r4, #0]
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	81a3      	strh	r3, [r4, #12]
 8001c22:	6923      	ldr	r3, [r4, #16]
 8001c24:	b94b      	cbnz	r3, 8001c3a <__swsetup_r+0x9a>
 8001c26:	89a3      	ldrh	r3, [r4, #12]
 8001c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c30:	d003      	beq.n	8001c3a <__swsetup_r+0x9a>
 8001c32:	4621      	mov	r1, r4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 f9fd 	bl	8002034 <__smakebuf_r>
 8001c3a:	89a0      	ldrh	r0, [r4, #12]
 8001c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c40:	f010 0301 	ands.w	r3, r0, #1
 8001c44:	d00a      	beq.n	8001c5c <__swsetup_r+0xbc>
 8001c46:	2300      	movs	r3, #0
 8001c48:	60a3      	str	r3, [r4, #8]
 8001c4a:	6963      	ldr	r3, [r4, #20]
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	61a3      	str	r3, [r4, #24]
 8001c50:	6923      	ldr	r3, [r4, #16]
 8001c52:	b943      	cbnz	r3, 8001c66 <__swsetup_r+0xc6>
 8001c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c58:	d1ba      	bne.n	8001bd0 <__swsetup_r+0x30>
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	0781      	lsls	r1, r0, #30
 8001c5e:	bf58      	it	pl
 8001c60:	6963      	ldrpl	r3, [r4, #20]
 8001c62:	60a3      	str	r3, [r4, #8]
 8001c64:	e7f4      	b.n	8001c50 <__swsetup_r+0xb0>
 8001c66:	2000      	movs	r0, #0
 8001c68:	e7f7      	b.n	8001c5a <__swsetup_r+0xba>
 8001c6a:	bf00      	nop
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	080024d0 	.word	0x080024d0
 8001c74:	080024f0 	.word	0x080024f0
 8001c78:	080024b0 	.word	0x080024b0

08001c7c <__sflush_r>:
 8001c7c:	898a      	ldrh	r2, [r1, #12]
 8001c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c80:	4605      	mov	r5, r0
 8001c82:	0710      	lsls	r0, r2, #28
 8001c84:	460c      	mov	r4, r1
 8001c86:	d457      	bmi.n	8001d38 <__sflush_r+0xbc>
 8001c88:	684b      	ldr	r3, [r1, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dc04      	bgt.n	8001c98 <__sflush_r+0x1c>
 8001c8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dc01      	bgt.n	8001c98 <__sflush_r+0x1c>
 8001c94:	2000      	movs	r0, #0
 8001c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c9a:	2e00      	cmp	r6, #0
 8001c9c:	d0fa      	beq.n	8001c94 <__sflush_r+0x18>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ca4:	682f      	ldr	r7, [r5, #0]
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	d032      	beq.n	8001d10 <__sflush_r+0x94>
 8001caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cac:	89a3      	ldrh	r3, [r4, #12]
 8001cae:	075a      	lsls	r2, r3, #29
 8001cb0:	d505      	bpl.n	8001cbe <__sflush_r+0x42>
 8001cb2:	6863      	ldr	r3, [r4, #4]
 8001cb4:	1ac0      	subs	r0, r0, r3
 8001cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cb8:	b10b      	cbz	r3, 8001cbe <__sflush_r+0x42>
 8001cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cbc:	1ac0      	subs	r0, r0, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cc4:	6a21      	ldr	r1, [r4, #32]
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	47b0      	blx	r6
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	d106      	bne.n	8001cde <__sflush_r+0x62>
 8001cd0:	6829      	ldr	r1, [r5, #0]
 8001cd2:	291d      	cmp	r1, #29
 8001cd4:	d82c      	bhi.n	8001d30 <__sflush_r+0xb4>
 8001cd6:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <__sflush_r+0x100>)
 8001cd8:	40ca      	lsrs	r2, r1
 8001cda:	07d6      	lsls	r6, r2, #31
 8001cdc:	d528      	bpl.n	8001d30 <__sflush_r+0xb4>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	6062      	str	r2, [r4, #4]
 8001ce2:	04d9      	lsls	r1, r3, #19
 8001ce4:	6922      	ldr	r2, [r4, #16]
 8001ce6:	6022      	str	r2, [r4, #0]
 8001ce8:	d504      	bpl.n	8001cf4 <__sflush_r+0x78>
 8001cea:	1c42      	adds	r2, r0, #1
 8001cec:	d101      	bne.n	8001cf2 <__sflush_r+0x76>
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	b903      	cbnz	r3, 8001cf4 <__sflush_r+0x78>
 8001cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8001cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cf6:	602f      	str	r7, [r5, #0]
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d0cb      	beq.n	8001c94 <__sflush_r+0x18>
 8001cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d00:	4299      	cmp	r1, r3
 8001d02:	d002      	beq.n	8001d0a <__sflush_r+0x8e>
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 f9d5 	bl	80020b4 <_free_r>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d0e:	e7c2      	b.n	8001c96 <__sflush_r+0x1a>
 8001d10:	6a21      	ldr	r1, [r4, #32]
 8001d12:	2301      	movs	r3, #1
 8001d14:	4628      	mov	r0, r5
 8001d16:	47b0      	blx	r6
 8001d18:	1c41      	adds	r1, r0, #1
 8001d1a:	d1c7      	bne.n	8001cac <__sflush_r+0x30>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0c4      	beq.n	8001cac <__sflush_r+0x30>
 8001d22:	2b1d      	cmp	r3, #29
 8001d24:	d001      	beq.n	8001d2a <__sflush_r+0xae>
 8001d26:	2b16      	cmp	r3, #22
 8001d28:	d101      	bne.n	8001d2e <__sflush_r+0xb2>
 8001d2a:	602f      	str	r7, [r5, #0]
 8001d2c:	e7b2      	b.n	8001c94 <__sflush_r+0x18>
 8001d2e:	89a3      	ldrh	r3, [r4, #12]
 8001d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d34:	81a3      	strh	r3, [r4, #12]
 8001d36:	e7ae      	b.n	8001c96 <__sflush_r+0x1a>
 8001d38:	690f      	ldr	r7, [r1, #16]
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d0aa      	beq.n	8001c94 <__sflush_r+0x18>
 8001d3e:	0793      	lsls	r3, r2, #30
 8001d40:	680e      	ldr	r6, [r1, #0]
 8001d42:	bf08      	it	eq
 8001d44:	694b      	ldreq	r3, [r1, #20]
 8001d46:	600f      	str	r7, [r1, #0]
 8001d48:	bf18      	it	ne
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	1bf6      	subs	r6, r6, r7
 8001d4e:	608b      	str	r3, [r1, #8]
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	dd9f      	ble.n	8001c94 <__sflush_r+0x18>
 8001d54:	6a21      	ldr	r1, [r4, #32]
 8001d56:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d5a:	4633      	mov	r3, r6
 8001d5c:	463a      	mov	r2, r7
 8001d5e:	4628      	mov	r0, r5
 8001d60:	47e0      	blx	ip
 8001d62:	2800      	cmp	r0, #0
 8001d64:	dc06      	bgt.n	8001d74 <__sflush_r+0xf8>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	81a3      	strh	r3, [r4, #12]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d72:	e790      	b.n	8001c96 <__sflush_r+0x1a>
 8001d74:	4407      	add	r7, r0
 8001d76:	1a36      	subs	r6, r6, r0
 8001d78:	e7ea      	b.n	8001d50 <__sflush_r+0xd4>
 8001d7a:	bf00      	nop
 8001d7c:	20400001 	.word	0x20400001

08001d80 <_fflush_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	690b      	ldr	r3, [r1, #16]
 8001d84:	4605      	mov	r5, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	b913      	cbnz	r3, 8001d90 <_fflush_r+0x10>
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	b118      	cbz	r0, 8001d9a <_fflush_r+0x1a>
 8001d92:	6983      	ldr	r3, [r0, #24]
 8001d94:	b90b      	cbnz	r3, 8001d9a <_fflush_r+0x1a>
 8001d96:	f000 f887 	bl	8001ea8 <__sinit>
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <_fflush_r+0x6c>)
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	d11b      	bne.n	8001dd8 <_fflush_r+0x58>
 8001da0:	686c      	ldr	r4, [r5, #4]
 8001da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ef      	beq.n	8001d8a <_fflush_r+0xa>
 8001daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dac:	07d0      	lsls	r0, r2, #31
 8001dae:	d404      	bmi.n	8001dba <_fflush_r+0x3a>
 8001db0:	0599      	lsls	r1, r3, #22
 8001db2:	d402      	bmi.n	8001dba <_fflush_r+0x3a>
 8001db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001db6:	f000 f915 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 8001dba:	4628      	mov	r0, r5
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f7ff ff5d 	bl	8001c7c <__sflush_r>
 8001dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dc4:	07da      	lsls	r2, r3, #31
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	d4e0      	bmi.n	8001d8c <_fflush_r+0xc>
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	059b      	lsls	r3, r3, #22
 8001dce:	d4dd      	bmi.n	8001d8c <_fflush_r+0xc>
 8001dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dd2:	f000 f908 	bl	8001fe6 <__retarget_lock_release_recursive>
 8001dd6:	e7d9      	b.n	8001d8c <_fflush_r+0xc>
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <_fflush_r+0x70>)
 8001dda:	429c      	cmp	r4, r3
 8001ddc:	d101      	bne.n	8001de2 <_fflush_r+0x62>
 8001dde:	68ac      	ldr	r4, [r5, #8]
 8001de0:	e7df      	b.n	8001da2 <_fflush_r+0x22>
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <_fflush_r+0x74>)
 8001de4:	429c      	cmp	r4, r3
 8001de6:	bf08      	it	eq
 8001de8:	68ec      	ldreq	r4, [r5, #12]
 8001dea:	e7da      	b.n	8001da2 <_fflush_r+0x22>
 8001dec:	080024d0 	.word	0x080024d0
 8001df0:	080024f0 	.word	0x080024f0
 8001df4:	080024b0 	.word	0x080024b0

08001df8 <std>:
 8001df8:	2300      	movs	r3, #0
 8001dfa:	b510      	push	{r4, lr}
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8001e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e06:	6083      	str	r3, [r0, #8]
 8001e08:	8181      	strh	r1, [r0, #12]
 8001e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e0c:	81c2      	strh	r2, [r0, #14]
 8001e0e:	6183      	str	r3, [r0, #24]
 8001e10:	4619      	mov	r1, r3
 8001e12:	2208      	movs	r2, #8
 8001e14:	305c      	adds	r0, #92	; 0x5c
 8001e16:	f7ff fdf3 	bl	8001a00 <memset>
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <std+0x38>)
 8001e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <std+0x3c>)
 8001e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <std+0x40>)
 8001e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <std+0x44>)
 8001e28:	6224      	str	r4, [r4, #32]
 8001e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	bf00      	nop
 8001e30:	08002291 	.word	0x08002291
 8001e34:	080022b3 	.word	0x080022b3
 8001e38:	080022eb 	.word	0x080022eb
 8001e3c:	0800230f 	.word	0x0800230f

08001e40 <_cleanup_r>:
 8001e40:	4901      	ldr	r1, [pc, #4]	; (8001e48 <_cleanup_r+0x8>)
 8001e42:	f000 b8af 	b.w	8001fa4 <_fwalk_reent>
 8001e46:	bf00      	nop
 8001e48:	08001d81 	.word	0x08001d81

08001e4c <__sfmoreglue>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	2268      	movs	r2, #104	; 0x68
 8001e50:	1e4d      	subs	r5, r1, #1
 8001e52:	4355      	muls	r5, r2
 8001e54:	460e      	mov	r6, r1
 8001e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e5a:	f000 f995 	bl	8002188 <_malloc_r>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	b140      	cbz	r0, 8001e74 <__sfmoreglue+0x28>
 8001e62:	2100      	movs	r1, #0
 8001e64:	e9c0 1600 	strd	r1, r6, [r0]
 8001e68:	300c      	adds	r0, #12
 8001e6a:	60a0      	str	r0, [r4, #8]
 8001e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e70:	f7ff fdc6 	bl	8001a00 <memset>
 8001e74:	4620      	mov	r0, r4
 8001e76:	bd70      	pop	{r4, r5, r6, pc}

08001e78 <__sfp_lock_acquire>:
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <__sfp_lock_acquire+0x8>)
 8001e7a:	f000 b8b3 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 8001e7e:	bf00      	nop
 8001e80:	200000d9 	.word	0x200000d9

08001e84 <__sfp_lock_release>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__sfp_lock_release+0x8>)
 8001e86:	f000 b8ae 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	200000d9 	.word	0x200000d9

08001e90 <__sinit_lock_acquire>:
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <__sinit_lock_acquire+0x8>)
 8001e92:	f000 b8a7 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 8001e96:	bf00      	nop
 8001e98:	200000da 	.word	0x200000da

08001e9c <__sinit_lock_release>:
 8001e9c:	4801      	ldr	r0, [pc, #4]	; (8001ea4 <__sinit_lock_release+0x8>)
 8001e9e:	f000 b8a2 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8001ea2:	bf00      	nop
 8001ea4:	200000da 	.word	0x200000da

08001ea8 <__sinit>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
 8001eac:	f7ff fff0 	bl	8001e90 <__sinit_lock_acquire>
 8001eb0:	69a3      	ldr	r3, [r4, #24]
 8001eb2:	b11b      	cbz	r3, 8001ebc <__sinit+0x14>
 8001eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eb8:	f7ff bff0 	b.w	8001e9c <__sinit_lock_release>
 8001ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <__sinit+0x68>)
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <__sinit+0x6c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001eca:	42a3      	cmp	r3, r4
 8001ecc:	bf04      	itt	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	61a3      	streq	r3, [r4, #24]
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f000 f820 	bl	8001f18 <__sfp>
 8001ed8:	6060      	str	r0, [r4, #4]
 8001eda:	4620      	mov	r0, r4
 8001edc:	f000 f81c 	bl	8001f18 <__sfp>
 8001ee0:	60a0      	str	r0, [r4, #8]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 f818 	bl	8001f18 <__sfp>
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60e0      	str	r0, [r4, #12]
 8001eec:	2104      	movs	r1, #4
 8001eee:	6860      	ldr	r0, [r4, #4]
 8001ef0:	f7ff ff82 	bl	8001df8 <std>
 8001ef4:	68a0      	ldr	r0, [r4, #8]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2109      	movs	r1, #9
 8001efa:	f7ff ff7d 	bl	8001df8 <std>
 8001efe:	68e0      	ldr	r0, [r4, #12]
 8001f00:	2202      	movs	r2, #2
 8001f02:	2112      	movs	r1, #18
 8001f04:	f7ff ff78 	bl	8001df8 <std>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61a3      	str	r3, [r4, #24]
 8001f0c:	e7d2      	b.n	8001eb4 <__sinit+0xc>
 8001f0e:	bf00      	nop
 8001f10:	080024ac 	.word	0x080024ac
 8001f14:	08001e41 	.word	0x08001e41

08001f18 <__sfp>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	4607      	mov	r7, r0
 8001f1c:	f7ff ffac 	bl	8001e78 <__sfp_lock_acquire>
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <__sfp+0x84>)
 8001f22:	681e      	ldr	r6, [r3, #0]
 8001f24:	69b3      	ldr	r3, [r6, #24]
 8001f26:	b913      	cbnz	r3, 8001f2e <__sfp+0x16>
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f7ff ffbd 	bl	8001ea8 <__sinit>
 8001f2e:	3648      	adds	r6, #72	; 0x48
 8001f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	d503      	bpl.n	8001f40 <__sfp+0x28>
 8001f38:	6833      	ldr	r3, [r6, #0]
 8001f3a:	b30b      	cbz	r3, 8001f80 <__sfp+0x68>
 8001f3c:	6836      	ldr	r6, [r6, #0]
 8001f3e:	e7f7      	b.n	8001f30 <__sfp+0x18>
 8001f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f44:	b9d5      	cbnz	r5, 8001f7c <__sfp+0x64>
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <__sfp+0x88>)
 8001f48:	60e3      	str	r3, [r4, #12]
 8001f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f50:	f000 f847 	bl	8001fe2 <__retarget_lock_init_recursive>
 8001f54:	f7ff ff96 	bl	8001e84 <__sfp_lock_release>
 8001f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f60:	6025      	str	r5, [r4, #0]
 8001f62:	61a5      	str	r5, [r4, #24]
 8001f64:	2208      	movs	r2, #8
 8001f66:	4629      	mov	r1, r5
 8001f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f6c:	f7ff fd48 	bl	8001a00 <memset>
 8001f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f78:	4620      	mov	r0, r4
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f7c:	3468      	adds	r4, #104	; 0x68
 8001f7e:	e7d9      	b.n	8001f34 <__sfp+0x1c>
 8001f80:	2104      	movs	r1, #4
 8001f82:	4638      	mov	r0, r7
 8001f84:	f7ff ff62 	bl	8001e4c <__sfmoreglue>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	6030      	str	r0, [r6, #0]
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1d5      	bne.n	8001f3c <__sfp+0x24>
 8001f90:	f7ff ff78 	bl	8001e84 <__sfp_lock_release>
 8001f94:	230c      	movs	r3, #12
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	e7ee      	b.n	8001f78 <__sfp+0x60>
 8001f9a:	bf00      	nop
 8001f9c:	080024ac 	.word	0x080024ac
 8001fa0:	ffff0001 	.word	0xffff0001

08001fa4 <_fwalk_reent>:
 8001fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	4606      	mov	r6, r0
 8001faa:	4688      	mov	r8, r1
 8001fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fb0:	2700      	movs	r7, #0
 8001fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8001fba:	d505      	bpl.n	8001fc8 <_fwalk_reent+0x24>
 8001fbc:	6824      	ldr	r4, [r4, #0]
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d1f7      	bne.n	8001fb2 <_fwalk_reent+0xe>
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fc8:	89ab      	ldrh	r3, [r5, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d907      	bls.n	8001fde <_fwalk_reent+0x3a>
 8001fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	d003      	beq.n	8001fde <_fwalk_reent+0x3a>
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	4630      	mov	r0, r6
 8001fda:	47c0      	blx	r8
 8001fdc:	4307      	orrs	r7, r0
 8001fde:	3568      	adds	r5, #104	; 0x68
 8001fe0:	e7e9      	b.n	8001fb6 <_fwalk_reent+0x12>

08001fe2 <__retarget_lock_init_recursive>:
 8001fe2:	4770      	bx	lr

08001fe4 <__retarget_lock_acquire_recursive>:
 8001fe4:	4770      	bx	lr

08001fe6 <__retarget_lock_release_recursive>:
 8001fe6:	4770      	bx	lr

08001fe8 <__swhatbuf_r>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	460e      	mov	r6, r1
 8001fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	b096      	sub	sp, #88	; 0x58
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	da08      	bge.n	800200c <__swhatbuf_r+0x24>
 8001ffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	602a      	str	r2, [r5, #0]
 8002002:	061a      	lsls	r2, r3, #24
 8002004:	d410      	bmi.n	8002028 <__swhatbuf_r+0x40>
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	e00e      	b.n	800202a <__swhatbuf_r+0x42>
 800200c:	466a      	mov	r2, sp
 800200e:	f000 f9a5 	bl	800235c <_fstat_r>
 8002012:	2800      	cmp	r0, #0
 8002014:	dbf1      	blt.n	8001ffa <__swhatbuf_r+0x12>
 8002016:	9a01      	ldr	r2, [sp, #4]
 8002018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800201c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002020:	425a      	negs	r2, r3
 8002022:	415a      	adcs	r2, r3
 8002024:	602a      	str	r2, [r5, #0]
 8002026:	e7ee      	b.n	8002006 <__swhatbuf_r+0x1e>
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	2000      	movs	r0, #0
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	b016      	add	sp, #88	; 0x58
 8002030:	bd70      	pop	{r4, r5, r6, pc}
	...

08002034 <__smakebuf_r>:
 8002034:	898b      	ldrh	r3, [r1, #12]
 8002036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002038:	079d      	lsls	r5, r3, #30
 800203a:	4606      	mov	r6, r0
 800203c:	460c      	mov	r4, r1
 800203e:	d507      	bpl.n	8002050 <__smakebuf_r+0x1c>
 8002040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	6123      	str	r3, [r4, #16]
 8002048:	2301      	movs	r3, #1
 800204a:	6163      	str	r3, [r4, #20]
 800204c:	b002      	add	sp, #8
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	ab01      	add	r3, sp, #4
 8002052:	466a      	mov	r2, sp
 8002054:	f7ff ffc8 	bl	8001fe8 <__swhatbuf_r>
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	4605      	mov	r5, r0
 800205c:	4630      	mov	r0, r6
 800205e:	f000 f893 	bl	8002188 <_malloc_r>
 8002062:	b948      	cbnz	r0, 8002078 <__smakebuf_r+0x44>
 8002064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002068:	059a      	lsls	r2, r3, #22
 800206a:	d4ef      	bmi.n	800204c <__smakebuf_r+0x18>
 800206c:	f023 0303 	bic.w	r3, r3, #3
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	e7e3      	b.n	8002040 <__smakebuf_r+0xc>
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <__smakebuf_r+0x7c>)
 800207a:	62b3      	str	r3, [r6, #40]	; 0x28
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	6020      	str	r0, [r4, #0]
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	81a3      	strh	r3, [r4, #12]
 8002086:	9b00      	ldr	r3, [sp, #0]
 8002088:	6163      	str	r3, [r4, #20]
 800208a:	9b01      	ldr	r3, [sp, #4]
 800208c:	6120      	str	r0, [r4, #16]
 800208e:	b15b      	cbz	r3, 80020a8 <__smakebuf_r+0x74>
 8002090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002094:	4630      	mov	r0, r6
 8002096:	f000 f973 	bl	8002380 <_isatty_r>
 800209a:	b128      	cbz	r0, 80020a8 <__smakebuf_r+0x74>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	89a0      	ldrh	r0, [r4, #12]
 80020aa:	4305      	orrs	r5, r0
 80020ac:	81a5      	strh	r5, [r4, #12]
 80020ae:	e7cd      	b.n	800204c <__smakebuf_r+0x18>
 80020b0:	08001e41 	.word	0x08001e41

080020b4 <_free_r>:
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4605      	mov	r5, r0
 80020b8:	2900      	cmp	r1, #0
 80020ba:	d041      	beq.n	8002140 <_free_r+0x8c>
 80020bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020c0:	1f0c      	subs	r4, r1, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfb8      	it	lt
 80020c6:	18e4      	addlt	r4, r4, r3
 80020c8:	f000 f97c 	bl	80023c4 <__malloc_lock>
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <_free_r+0x90>)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	b933      	cbnz	r3, 80020e0 <_free_r+0x2c>
 80020d2:	6063      	str	r3, [r4, #4]
 80020d4:	6014      	str	r4, [r2, #0]
 80020d6:	4628      	mov	r0, r5
 80020d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020dc:	f000 b978 	b.w	80023d0 <__malloc_unlock>
 80020e0:	42a3      	cmp	r3, r4
 80020e2:	d908      	bls.n	80020f6 <_free_r+0x42>
 80020e4:	6820      	ldr	r0, [r4, #0]
 80020e6:	1821      	adds	r1, r4, r0
 80020e8:	428b      	cmp	r3, r1
 80020ea:	bf01      	itttt	eq
 80020ec:	6819      	ldreq	r1, [r3, #0]
 80020ee:	685b      	ldreq	r3, [r3, #4]
 80020f0:	1809      	addeq	r1, r1, r0
 80020f2:	6021      	streq	r1, [r4, #0]
 80020f4:	e7ed      	b.n	80020d2 <_free_r+0x1e>
 80020f6:	461a      	mov	r2, r3
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b10b      	cbz	r3, 8002100 <_free_r+0x4c>
 80020fc:	42a3      	cmp	r3, r4
 80020fe:	d9fa      	bls.n	80020f6 <_free_r+0x42>
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	1850      	adds	r0, r2, r1
 8002104:	42a0      	cmp	r0, r4
 8002106:	d10b      	bne.n	8002120 <_free_r+0x6c>
 8002108:	6820      	ldr	r0, [r4, #0]
 800210a:	4401      	add	r1, r0
 800210c:	1850      	adds	r0, r2, r1
 800210e:	4283      	cmp	r3, r0
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	d1e0      	bne.n	80020d6 <_free_r+0x22>
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6053      	str	r3, [r2, #4]
 800211a:	4401      	add	r1, r0
 800211c:	6011      	str	r1, [r2, #0]
 800211e:	e7da      	b.n	80020d6 <_free_r+0x22>
 8002120:	d902      	bls.n	8002128 <_free_r+0x74>
 8002122:	230c      	movs	r3, #12
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	e7d6      	b.n	80020d6 <_free_r+0x22>
 8002128:	6820      	ldr	r0, [r4, #0]
 800212a:	1821      	adds	r1, r4, r0
 800212c:	428b      	cmp	r3, r1
 800212e:	bf04      	itt	eq
 8002130:	6819      	ldreq	r1, [r3, #0]
 8002132:	685b      	ldreq	r3, [r3, #4]
 8002134:	6063      	str	r3, [r4, #4]
 8002136:	bf04      	itt	eq
 8002138:	1809      	addeq	r1, r1, r0
 800213a:	6021      	streq	r1, [r4, #0]
 800213c:	6054      	str	r4, [r2, #4]
 800213e:	e7ca      	b.n	80020d6 <_free_r+0x22>
 8002140:	bd38      	pop	{r3, r4, r5, pc}
 8002142:	bf00      	nop
 8002144:	200000dc 	.word	0x200000dc

08002148 <sbrk_aligned>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	4e0e      	ldr	r6, [pc, #56]	; (8002184 <sbrk_aligned+0x3c>)
 800214c:	460c      	mov	r4, r1
 800214e:	6831      	ldr	r1, [r6, #0]
 8002150:	4605      	mov	r5, r0
 8002152:	b911      	cbnz	r1, 800215a <sbrk_aligned+0x12>
 8002154:	f000 f88c 	bl	8002270 <_sbrk_r>
 8002158:	6030      	str	r0, [r6, #0]
 800215a:	4621      	mov	r1, r4
 800215c:	4628      	mov	r0, r5
 800215e:	f000 f887 	bl	8002270 <_sbrk_r>
 8002162:	1c43      	adds	r3, r0, #1
 8002164:	d00a      	beq.n	800217c <sbrk_aligned+0x34>
 8002166:	1cc4      	adds	r4, r0, #3
 8002168:	f024 0403 	bic.w	r4, r4, #3
 800216c:	42a0      	cmp	r0, r4
 800216e:	d007      	beq.n	8002180 <sbrk_aligned+0x38>
 8002170:	1a21      	subs	r1, r4, r0
 8002172:	4628      	mov	r0, r5
 8002174:	f000 f87c 	bl	8002270 <_sbrk_r>
 8002178:	3001      	adds	r0, #1
 800217a:	d101      	bne.n	8002180 <sbrk_aligned+0x38>
 800217c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002180:	4620      	mov	r0, r4
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	200000e0 	.word	0x200000e0

08002188 <_malloc_r>:
 8002188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218c:	1ccd      	adds	r5, r1, #3
 800218e:	f025 0503 	bic.w	r5, r5, #3
 8002192:	3508      	adds	r5, #8
 8002194:	2d0c      	cmp	r5, #12
 8002196:	bf38      	it	cc
 8002198:	250c      	movcc	r5, #12
 800219a:	2d00      	cmp	r5, #0
 800219c:	4607      	mov	r7, r0
 800219e:	db01      	blt.n	80021a4 <_malloc_r+0x1c>
 80021a0:	42a9      	cmp	r1, r5
 80021a2:	d905      	bls.n	80021b0 <_malloc_r+0x28>
 80021a4:	230c      	movs	r3, #12
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	2600      	movs	r6, #0
 80021aa:	4630      	mov	r0, r6
 80021ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021b0:	4e2e      	ldr	r6, [pc, #184]	; (800226c <_malloc_r+0xe4>)
 80021b2:	f000 f907 	bl	80023c4 <__malloc_lock>
 80021b6:	6833      	ldr	r3, [r6, #0]
 80021b8:	461c      	mov	r4, r3
 80021ba:	bb34      	cbnz	r4, 800220a <_malloc_r+0x82>
 80021bc:	4629      	mov	r1, r5
 80021be:	4638      	mov	r0, r7
 80021c0:	f7ff ffc2 	bl	8002148 <sbrk_aligned>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	4604      	mov	r4, r0
 80021c8:	d14d      	bne.n	8002266 <_malloc_r+0xde>
 80021ca:	6834      	ldr	r4, [r6, #0]
 80021cc:	4626      	mov	r6, r4
 80021ce:	2e00      	cmp	r6, #0
 80021d0:	d140      	bne.n	8002254 <_malloc_r+0xcc>
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	4631      	mov	r1, r6
 80021d6:	4638      	mov	r0, r7
 80021d8:	eb04 0803 	add.w	r8, r4, r3
 80021dc:	f000 f848 	bl	8002270 <_sbrk_r>
 80021e0:	4580      	cmp	r8, r0
 80021e2:	d13a      	bne.n	800225a <_malloc_r+0xd2>
 80021e4:	6821      	ldr	r1, [r4, #0]
 80021e6:	3503      	adds	r5, #3
 80021e8:	1a6d      	subs	r5, r5, r1
 80021ea:	f025 0503 	bic.w	r5, r5, #3
 80021ee:	3508      	adds	r5, #8
 80021f0:	2d0c      	cmp	r5, #12
 80021f2:	bf38      	it	cc
 80021f4:	250c      	movcc	r5, #12
 80021f6:	4629      	mov	r1, r5
 80021f8:	4638      	mov	r0, r7
 80021fa:	f7ff ffa5 	bl	8002148 <sbrk_aligned>
 80021fe:	3001      	adds	r0, #1
 8002200:	d02b      	beq.n	800225a <_malloc_r+0xd2>
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	442b      	add	r3, r5
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	e00e      	b.n	8002228 <_malloc_r+0xa0>
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	1b52      	subs	r2, r2, r5
 800220e:	d41e      	bmi.n	800224e <_malloc_r+0xc6>
 8002210:	2a0b      	cmp	r2, #11
 8002212:	d916      	bls.n	8002242 <_malloc_r+0xba>
 8002214:	1961      	adds	r1, r4, r5
 8002216:	42a3      	cmp	r3, r4
 8002218:	6025      	str	r5, [r4, #0]
 800221a:	bf18      	it	ne
 800221c:	6059      	strne	r1, [r3, #4]
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	bf08      	it	eq
 8002222:	6031      	streq	r1, [r6, #0]
 8002224:	5162      	str	r2, [r4, r5]
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	4638      	mov	r0, r7
 800222a:	f104 060b 	add.w	r6, r4, #11
 800222e:	f000 f8cf 	bl	80023d0 <__malloc_unlock>
 8002232:	f026 0607 	bic.w	r6, r6, #7
 8002236:	1d23      	adds	r3, r4, #4
 8002238:	1af2      	subs	r2, r6, r3
 800223a:	d0b6      	beq.n	80021aa <_malloc_r+0x22>
 800223c:	1b9b      	subs	r3, r3, r6
 800223e:	50a3      	str	r3, [r4, r2]
 8002240:	e7b3      	b.n	80021aa <_malloc_r+0x22>
 8002242:	6862      	ldr	r2, [r4, #4]
 8002244:	42a3      	cmp	r3, r4
 8002246:	bf0c      	ite	eq
 8002248:	6032      	streq	r2, [r6, #0]
 800224a:	605a      	strne	r2, [r3, #4]
 800224c:	e7ec      	b.n	8002228 <_malloc_r+0xa0>
 800224e:	4623      	mov	r3, r4
 8002250:	6864      	ldr	r4, [r4, #4]
 8002252:	e7b2      	b.n	80021ba <_malloc_r+0x32>
 8002254:	4634      	mov	r4, r6
 8002256:	6876      	ldr	r6, [r6, #4]
 8002258:	e7b9      	b.n	80021ce <_malloc_r+0x46>
 800225a:	230c      	movs	r3, #12
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4638      	mov	r0, r7
 8002260:	f000 f8b6 	bl	80023d0 <__malloc_unlock>
 8002264:	e7a1      	b.n	80021aa <_malloc_r+0x22>
 8002266:	6025      	str	r5, [r4, #0]
 8002268:	e7de      	b.n	8002228 <_malloc_r+0xa0>
 800226a:	bf00      	nop
 800226c:	200000dc 	.word	0x200000dc

08002270 <_sbrk_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	4d06      	ldr	r5, [pc, #24]	; (800228c <_sbrk_r+0x1c>)
 8002274:	2300      	movs	r3, #0
 8002276:	4604      	mov	r4, r0
 8002278:	4608      	mov	r0, r1
 800227a:	602b      	str	r3, [r5, #0]
 800227c:	f7fe fa14 	bl	80006a8 <_sbrk>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d102      	bne.n	800228a <_sbrk_r+0x1a>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	b103      	cbz	r3, 800228a <_sbrk_r+0x1a>
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	200000e4 	.word	0x200000e4

08002290 <__sread>:
 8002290:	b510      	push	{r4, lr}
 8002292:	460c      	mov	r4, r1
 8002294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002298:	f000 f8a0 	bl	80023dc <_read_r>
 800229c:	2800      	cmp	r0, #0
 800229e:	bfab      	itete	ge
 80022a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022a2:	89a3      	ldrhlt	r3, [r4, #12]
 80022a4:	181b      	addge	r3, r3, r0
 80022a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022aa:	bfac      	ite	ge
 80022ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80022ae:	81a3      	strhlt	r3, [r4, #12]
 80022b0:	bd10      	pop	{r4, pc}

080022b2 <__swrite>:
 80022b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b6:	461f      	mov	r7, r3
 80022b8:	898b      	ldrh	r3, [r1, #12]
 80022ba:	05db      	lsls	r3, r3, #23
 80022bc:	4605      	mov	r5, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	4616      	mov	r6, r2
 80022c2:	d505      	bpl.n	80022d0 <__swrite+0x1e>
 80022c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c8:	2302      	movs	r3, #2
 80022ca:	2200      	movs	r2, #0
 80022cc:	f000 f868 	bl	80023a0 <_lseek_r>
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022da:	81a3      	strh	r3, [r4, #12]
 80022dc:	4632      	mov	r2, r6
 80022de:	463b      	mov	r3, r7
 80022e0:	4628      	mov	r0, r5
 80022e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022e6:	f000 b817 	b.w	8002318 <_write_r>

080022ea <__sseek>:
 80022ea:	b510      	push	{r4, lr}
 80022ec:	460c      	mov	r4, r1
 80022ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f2:	f000 f855 	bl	80023a0 <_lseek_r>
 80022f6:	1c43      	adds	r3, r0, #1
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	bf15      	itete	ne
 80022fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80022fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002306:	81a3      	strheq	r3, [r4, #12]
 8002308:	bf18      	it	ne
 800230a:	81a3      	strhne	r3, [r4, #12]
 800230c:	bd10      	pop	{r4, pc}

0800230e <__sclose>:
 800230e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002312:	f000 b813 	b.w	800233c <_close_r>
	...

08002318 <_write_r>:
 8002318:	b538      	push	{r3, r4, r5, lr}
 800231a:	4d07      	ldr	r5, [pc, #28]	; (8002338 <_write_r+0x20>)
 800231c:	4604      	mov	r4, r0
 800231e:	4608      	mov	r0, r1
 8002320:	4611      	mov	r1, r2
 8002322:	2200      	movs	r2, #0
 8002324:	602a      	str	r2, [r5, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f7fe f971 	bl	800060e <_write>
 800232c:	1c43      	adds	r3, r0, #1
 800232e:	d102      	bne.n	8002336 <_write_r+0x1e>
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	b103      	cbz	r3, 8002336 <_write_r+0x1e>
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	bd38      	pop	{r3, r4, r5, pc}
 8002338:	200000e4 	.word	0x200000e4

0800233c <_close_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4d06      	ldr	r5, [pc, #24]	; (8002358 <_close_r+0x1c>)
 8002340:	2300      	movs	r3, #0
 8002342:	4604      	mov	r4, r0
 8002344:	4608      	mov	r0, r1
 8002346:	602b      	str	r3, [r5, #0]
 8002348:	f7fe f97d 	bl	8000646 <_close>
 800234c:	1c43      	adds	r3, r0, #1
 800234e:	d102      	bne.n	8002356 <_close_r+0x1a>
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	b103      	cbz	r3, 8002356 <_close_r+0x1a>
 8002354:	6023      	str	r3, [r4, #0]
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	200000e4 	.word	0x200000e4

0800235c <_fstat_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4d07      	ldr	r5, [pc, #28]	; (800237c <_fstat_r+0x20>)
 8002360:	2300      	movs	r3, #0
 8002362:	4604      	mov	r4, r0
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	602b      	str	r3, [r5, #0]
 800236a:	f7fe f977 	bl	800065c <_fstat>
 800236e:	1c43      	adds	r3, r0, #1
 8002370:	d102      	bne.n	8002378 <_fstat_r+0x1c>
 8002372:	682b      	ldr	r3, [r5, #0]
 8002374:	b103      	cbz	r3, 8002378 <_fstat_r+0x1c>
 8002376:	6023      	str	r3, [r4, #0]
 8002378:	bd38      	pop	{r3, r4, r5, pc}
 800237a:	bf00      	nop
 800237c:	200000e4 	.word	0x200000e4

08002380 <_isatty_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4d06      	ldr	r5, [pc, #24]	; (800239c <_isatty_r+0x1c>)
 8002384:	2300      	movs	r3, #0
 8002386:	4604      	mov	r4, r0
 8002388:	4608      	mov	r0, r1
 800238a:	602b      	str	r3, [r5, #0]
 800238c:	f7fe f975 	bl	800067a <_isatty>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_isatty_r+0x1a>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	b103      	cbz	r3, 800239a <_isatty_r+0x1a>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	200000e4 	.word	0x200000e4

080023a0 <_lseek_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4d07      	ldr	r5, [pc, #28]	; (80023c0 <_lseek_r+0x20>)
 80023a4:	4604      	mov	r4, r0
 80023a6:	4608      	mov	r0, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	2200      	movs	r2, #0
 80023ac:	602a      	str	r2, [r5, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7fe f96d 	bl	800068e <_lseek>
 80023b4:	1c43      	adds	r3, r0, #1
 80023b6:	d102      	bne.n	80023be <_lseek_r+0x1e>
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	b103      	cbz	r3, 80023be <_lseek_r+0x1e>
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	200000e4 	.word	0x200000e4

080023c4 <__malloc_lock>:
 80023c4:	4801      	ldr	r0, [pc, #4]	; (80023cc <__malloc_lock+0x8>)
 80023c6:	f7ff be0d 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 80023ca:	bf00      	nop
 80023cc:	200000d8 	.word	0x200000d8

080023d0 <__malloc_unlock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	; (80023d8 <__malloc_unlock+0x8>)
 80023d2:	f7ff be08 	b.w	8001fe6 <__retarget_lock_release_recursive>
 80023d6:	bf00      	nop
 80023d8:	200000d8 	.word	0x200000d8

080023dc <_read_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4d07      	ldr	r5, [pc, #28]	; (80023fc <_read_r+0x20>)
 80023e0:	4604      	mov	r4, r0
 80023e2:	4608      	mov	r0, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	602a      	str	r2, [r5, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7fe f8f2 	bl	80005d4 <_read>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_read_r+0x1e>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_read_r+0x1e>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200000e4 	.word	0x200000e4

08002400 <_init>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	bf00      	nop
 8002404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002406:	bc08      	pop	{r3}
 8002408:	469e      	mov	lr, r3
 800240a:	4770      	bx	lr

0800240c <_fini>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr
